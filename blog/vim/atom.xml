<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | アルパカエンジニアのブログ]]></title>
  <link href="http://alpaca-tc.github.io/blog/vim/atom.xml" rel="self"/>
  <link href="http://alpaca-tc.github.io/"/>
  <updated>2013-11-13T18:18:40+09:00</updated>
  <id>http://alpaca-tc.github.io/</id>
  <author>
    <name><![CDATA[alpaca-tc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim中級者を脱する スコープ編]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/break-vim-beginners-scope.html"/>
    <updated>2013-11-13T17:26:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/break-vim-beginners-scope</id>
    <content type="html"><![CDATA[<p>スコープというのは、<code>宣言の場所により決定される変数やプロシ-ジャの有効範囲</code>ということで</p>

<p>いわゆるグローバル変数や、ローカル変数などと呼ばれるものです。
個人的に、Vimプラグインを作り始めて一番ハマったのが<strong>スコープの問題</strong>でした。</p>

<p>vimrcの修正の時に、コピーペーストばかりしていると自分でも何やっているのか理解できないままですよね。</p>

<p>という訳で、よく登場しそうなスコープを少し理解してみましょう。</p>

<h2>よく見るスコープ一覧</h2>

<ul>
<li><code>g:</code>グローバルスコープ</li>
<li><code>a:</code>関数内スコープ</li>
<li><code>s:</code>スクリプトスコープ</li>
<li><code>b:</code>バッファスコープ</li>
<li><code>let huga=...</code>などの接頭辞なし変数</li>
</ul>


<h3><code>g:</code>スコープ</h3>

<p><code>let g:neocomplete#enable_at_startup = 1</code></p>

<p>こんな感じで、プラグインの設定にはよく使われるスコープです。
見てのとおり、<strong>グローバルなスコープとしてどこでも参照できます。</strong></p>

<p>スコープの変数を初期化するには、下記のようなコードを使います。
プラグインによる大量のエラーコードによって操作できなくなるので、嫌いな人のvimrcの末尾に書き込んでください。</p>

<p><code>vim
for key in keys(g:)
  execute 'unlet g:' . key
endfor
</code></p>

<h3><code>a:</code>スコープ</h3>

<p>個人的に一番理解しがたいスコープです。
関数内で、引数を参照するときに使用するスコープ</p>

<p>```
function! g:huga(a, b)
  echo a:
  &ldquo;=> {&lsquo;0&rsquo;: 0, &lsquo;000&rsquo;: [], &lsquo;b&rsquo;: &lsquo;b&rsquo;, &lsquo;a&rsquo;: &lsquo;a&rsquo;, &lsquo;firstline&rsquo;: 5, &lsquo;lastline&rsquo;: 5}
  echo a:b
  &rdquo;=> &lsquo;b&rsquo;
endfunction</p>

<p>call g:huga(&lsquo;a&rsquo;, &lsquo;b&rsquo;)
```</p>

<p>こんな感じで使います。他言語から移ってきた人には、正直使いづらい。
あー、なるほど関数内でだけ有効なスコープなのか。と思っていたらそれも間違い。</p>

<p>下記のようにすると、<strong>グローバルなスコープとして参照できます。</strong></p>

<p>```
function! a:huga(a, b)
  echo a:
  &ldquo;=> {&lsquo;0&rsquo;: 0, &lsquo;000&rsquo;: [], &lsquo;b&rsquo;: &lsquo;b&rsquo;, &lsquo;a&rsquo;: &lsquo;a&rsquo;, &lsquo;firstline&rsquo;: 5, &lsquo;lastline&rsquo;: 5}
  echo a:b
  &rdquo;=> &lsquo;b&rsquo;
endfunction</p>

<p>call a:huga(&lsquo;a&rsquo;, &lsquo;b&rsquo;)
```</p>

<p>けれど、<code>echo a:</code>は動かない。
僕には真実が分からない。</p>

<h3><code>s:</code>スコープ</h3>

<p>scriptのファイル内でのみ有効なスコープです。
プラグインで、プライベートなメソッドや定数を作るときによく使います。</p>

<p><code>
let s:script_scope = '外部からは参照できない'
function! s:script_scope_method()
  " プライベートメソッドとしてよく使われる
endfunction
</code></p>

<p>実は、この<code>s:</code>から始まる関数は、スクリプトがsourceされるときに置き換えられます。
<code>&lt;SNR&gt;1_script_scope_method</code>という感じの形になります。
えぇ、そうです。<strong>グローバルなスコープとして参照できます。</strong></p>

<p>この<code>&lt;SNR&gt;</code>の後にどの数値が割り振られているかは、<code>:scriptnames</code>で参照できます。</p>

<p>あるいは、こんな感じでも取得できます。</p>

<p><code>vim
function s:SID()
  return matchstr(expand('&lt;sfile&gt;'), '&lt;SNR&gt;\zs\d\+\ze_SID$')
endfun
echo s:SID() "=&gt; 244
</code></p>

<p><code>s:SID()</code>は<code>&lt;SID&gt;SID()</code>としても使えて、<code>&lt;SNR&gt;...</code>に置き換わるのでグローバルで使えます。
マッピングの時に、scriptスコープを使いたかったら必須ですね。</p>

<p><code>nnoremap s :echo &lt;SID&gt;SID()&lt;CR&gt;</code></p>

<p>ただし、s:変数は基本的には聖域です。
あーややこしい!!!</p>

<h3><code>b:</code>スコープ</h3>

<p>バッファ単位のスコープです。
ファイルタイプによる設定や、一時バッファによるプラグインの変数などはこのスコープを使います。</p>

<ul>
<li>ファイルタイプの変更をしたら&hellip;<code>b:current_syntax</code>, <code>b:did_ft_plugin</code>, <code>b:did_indent</code>etcが初期化&amp;格納されます</li>
<li>Uniteを起動したら<code>b:unite</code>に、VimShellを起動したら<code>b:vimshell</code>にデータが格納されます。</li>
</ul>


<p>Uniteのデバッグするときには、<code>echo b:unite.candidates</code>などを参照しましょう。</p>

<p>バッファが削除される<code>:bdelete</code>のタイミングで消去されます。
あぁ、ようやくまともなスコープだ。</p>

<h3><code>let huga=...</code>などの接頭辞なし変数</h3>

<p>えぇ。<strong>グローバルなスコープとして参照できます。</strong>
お前もか！</p>

<p>マナーとしては、やはり<code>g:</code>で宣言したいところですが、
Vimにデフォルトで入っているプラグインは、容赦なくこの変数を使ってきます。</p>

<p><code>:echo loaded_*&lt;Tab&gt;</code>などすれば、奴らを見つけられるはずです。</p>

<p>細かいことを言えば、関数内ならばローカルスコープです。
あるいは、ペチパーには理解しやすいスコープなのかもしれません。</p>

<h2>スコープのまとめ</h2>

<ul>
<li>スコープは<strong>ほとんどグローバルで参照できる</strong></li>
<li>getbufvar()やgettabvar()などでスコープへアクセス出来るため、聖域はほとんど無い</li>
<li>VimLは枠にハマらない言語仕様を持っている</li>
</ul>


<p><strong>正直今でも理解出来ていない</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimを使って新人教育]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/training-of-new-employees.html"/>
    <updated>2013-11-11T05:21:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/training-of-new-employees</id>
    <content type="html"><![CDATA[<p>一緒に働く仲間が増えました。
普段からオープンソースの開発や、バリバリ仕事ができる人でなければなかなかコードを書く力というのは一定の基準にならないと思います。</p>

<p>そこで、ペアプロやリファクタリングなどを行ってコーディングを教えるのが普通だと思うのですが、うちの会社はほとんどリモート勤務です。</p>

<p>とりあえず、最低限のレベルになるまでは、Githubを通して一問一答の形で問題を解いてってもらおうかなと思いました。</p>

<p>幸い、新人の人もvimmerなので、そのためのプラグインを作りました。</p>

<p><img class="image_on_frame center" src="/images/blog/11_11.png" title="Vimのデモ" ></p>

<p><strong><a href="https://github.com/enfactv/assignment">assignment.vim</a></strong></p>

<p>インストールはごく簡単です。</p>

<p><code>``vim
NeoBundle 'alpaca-tc/assignment'</code></p>

<p>let g:assignment#path = expand(&lsquo;~/path/to/assignment&rsquo;)</p>

<p>&ldquo; 初期化
&rdquo; <code>:AssignmentInit ~/インストール先ディレクトリ</code>
```</p>

<h3>良かったこと</h3>

<ul>
<li>GitHubの使い方がわからなくても、Vimから取り組めること</li>
<li>問題を作成するのが少し楽になったこと</li>
<li>Guard + Rspecの環境で、自動テストされること</li>
</ul>


<h3>悪かったこと</h3>

<ul>
<li>一問一答の形式って鬼効率悪いよね&hellip;</li>
</ul>


<p>まぁ、とりあえず一ヶ月はこの形式で進めていけば、最低限のコーディングができるようになるはずです。</p>

<h3>まとめ</h3>

<p>正直、今日は書くことがなかっただけです。うい！
暇だなーと思う方が入れば、プラグインを入れて問題を解いてみてください。</p>

<ol>
<li>プラグインをインストール</li>
<li><code>:AssignmentInit ~/インストール先ディレクトリ</code>を実行</li>
<li>vimrcに<code>let g:assignment#path = expand('~/path/to/assignment')</code>を追加</li>
<li><code>:Assignment solve &lt;tab&gt;</code>で問題を選択</li>
<li>Guardをまわしながら解くのみ！</li>
</ol>


<p>8クイーン問題や、RubyのDSLを作る問題などです。
初級者向けですが、暇つぶしにはなると思いますよ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimを使って新人教育]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/training-of-new-employee.html"/>
    <updated>2013-11-11T05:21:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/training-of-new-employee</id>
    <content type="html"><![CDATA[<p>嬉しいことに、一緒に働く仲間が2人増えました。</p>

<p>まだRubyに慣れていないそうなので、はじめの一ヶ月は教育期間を挟みます。</p>

<p>新人の方もvimmerなので、そのためのプラグインを作りました。</p>

<p><img class="image_on_frame center" src="/images/blog/11_11.png" title="Vimのデモ" ></p>

<p><strong><a href="https://github.com/enfactv/assignment">assignment.vim</a></strong></p>

<p>インストールはごく簡単です。</p>

<p><code>``vim
NeoBundle 'alpaca-tc/assignment'</code></p>

<p>let g:assignment#path = expand(&lsquo;~/path/to/assignment&rsquo;)
```</p>

<h3>良かったこと</h3>

<ul>
<li>GitHubの使い方がわからなくても、Vimから徐々に取り組めること</li>
<li>問題のやり取りが楽になったこと</li>
<li>自動テストがあるので、リモート勤務でも採点できること</li>
</ul>


<h3>悪かったこと</h3>

<ul>
<li>一問一答の形式って効率悪いよね&hellip;</li>
</ul>


<p>とりあえず一ヶ月はこの形式で進めて、Rubyに慣れてもらおうかと思います。</p>

<h2>まとめ</h2>

<p>正直、今日は書くことがなかっただけです。えへ。
暇だなー、俺初級者かなーと思う方が入れば、試しに問題に挑戦してみてください。</p>

<ol>
<li>プラグインをインストール</li>
<li><code>:AssignmentInit ~/インストール先ディレクトリ</code>を実行して初期化</li>
<li>vimrcに<code>let g:assignment#path = expand('~/path/to/assignment')</code>を追加</li>
<li><code>:Assignment solve &lt;tab&gt;</code>で問題を選択</li>
<li>Guardをまわしながら解くのみ！</li>
</ol>


<p>初めは、8クイーン問題や、RubyのDSLを作る問題などです。
初級者向けですが、少しは暇つぶしにはなると思いますよ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オススメなVimのプラグイン紹介]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/plugins-best-of-vim-1.html"/>
    <updated>2013-11-07T05:22:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/plugins-best-of-vim-1</id>
    <content type="html"><![CDATA[<p>普段使っているプラグインの中で、<em>これはイケてる！</em>と思ったプラグインを4つ紹介。</p>

<h2><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></h2>

<ul>
<li><code>{}</code>、<code>()</code>などの、対応する文字を<em>自働入力</em></li>
<li>括弧の片方が消えた時や、重複する時に<em>自働で調整してくれる</em></li>
<li><code>innoremap ( ()&lt;Left&gt;</code>とか未だにやっているのダサくない？</li>
</ul>


<p>```vim
&ldquo; <a href="https://github.com/jiangmiao/auto-pairs">本家</a>
&rdquo; Lazy loading用に修正済み
NeoBundleLazy &lsquo;alpaca-tc/auto-pairs&rsquo;, { &lsquo;autoload&rsquo; : {</p>

<pre><code>  \ 'insert': 1 }}
</code></pre>

<p>let hooks = neobundle#get_hooks(&lsquo;auto-pairs&rsquo;)
function! hooks.on_post_source(bundle)
  call auto_pairs#try_init()
endfunction
unlet hooks
```</p>

<h2><a href="https://github.com/junegunn/vim-easy-align">vim-easy-align</a></h2>

<ul>
<li>使いやすさ抜群の<em>整列用プラグイン</em></li>
<li><code>Alignta</code>がメジャーだけど、正直使いにくいよね。</li>
</ul>


<p><img class="image_on_frame center <a" src="href="https://raw.github.com/junegunn/i/master/vim-easy-align.gif">https://raw.github.com/junegunn/i/master/vim-easy-align.gif</a>" title="vim-easy-align DEMO" ></p>

<p>```vim
NeoBundleLazy &lsquo;junegunn/vim-easy-align&rsquo;, { &lsquo;autoload&rsquo;: {</p>

<pre><code>  \ 'commands' : ['EasyAlign'] }}
</code></pre>

<p>```</p>

<h2><a href="https://github.com/Yggdroot/indentLine">indentLine</a></h2>

<ul>
<li>イケてる、<em>インデント表示プラグイン</em></li>
<li><code>vim-indent-guides</code>は画面がうるさくなるから嫌！っていう人向け</li>
</ul>


<p>```vim
if has(&lsquo;conceal&rsquo;)
  NeoBundleLazy &lsquo;Yggdroot/indentLine&rsquo;, { &lsquo;autoload&rsquo; : {</p>

<pre><code>    \   'commands' : ['IndentLinesReset', 'IndentLinesToggle'],
    \   'filetypes': g:my.ft.program_files,
    \ }}
</code></pre>

<p>endif
```</p>

<h2><a href="https://github.com/terryma/vim-multiple-cursors">vim-multiple-cursors</a></h2>

<ul>
<li>SublimeTextの複数マーク&amp;同時編集 の機能を実現するプラグイン</li>
<li>実装に関しては完全に「こいつ無茶しやがって&hellip;」状態。</li>
</ul>


<p>```vim
NeoBundleLazy &lsquo;terryma/vim-multiple-cursors&rsquo;, { &lsquo;autload&rsquo;: {</p>

<pre><code>  \ 'function_prefix': 'multiple_cursors',
  \ }}
</code></pre>

<p>```</p>

<p>今回紹介したプラグインは、かなりシンプルに洗練されています。
使っているだけでも、作者の男前さを感じられる。そんなプラグインだと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim中級者を脱する augroup編]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/break-vim-beginners-augroup.html"/>
    <updated>2013-11-02T02:30:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/break-vim-beginners-augroup</id>
    <content type="html"><![CDATA[<h2>augroup, autocmdを理解する</h2>

<p><strong>所要時間 3分</strong></p>

<h3>この記事を読むべき人</h3>

<ul>
<li><code>augroup</code>を理解していない人</li>
<li><code>:source</code>コマンドを使う人</li>
</ul>


<h2>そもそもautocmdって？</h2>

<p>これは何をしているコマンドなのか分解してみましょう。</p>

<p><code>vim
autocmd BufNewFile * echo 'This is new file'
</code></p>

<ol>
<li>autocmdのコマンドを開始しますよ</li>
<li><code>BufNewFile</code>というタイミングでこのコマンドを実行しますよ</li>
<li>全てのバッファで<code>echo 'This is new file'</code>を実行しますよ</li>
</ol>


<p>となります。</p>

<p>このように、保存時や新規のファイルといったタイミングでコマンドを実行できます。</p>

<h2>では、augroupはなんのために存在するの？</h2>

<p><code>augroup</code>は、<code>autocmd</code>をグループでまとめるためのコマンドです。こんな感じて使われます。</p>

<p><code>vim
augroup EditNewFile
  autocmd!
  autocmd BufNewFile * echo 'This is new file'
augroup END
</code></p>

<p>例えば、<code>autocmd</code>が設定されているvimrcを、<code>:source ~/.vimrc</code>で再度読み込むとしましょう。</p>

<p>するとどうなるかというと、通常は<strong><code>autocmd</code>が重複して2度設定されます</strong>
当然、その<code>autocmd</code>が発火するときに2度実行されるので、実行が遅くなります。</p>

<p>それを防ぐために<code>augroup</code>を使います。</p>

<h2>ベストプラクティスは？</h2>

<p>つまるところ、<code>augroup</code>は<code>autocmd</code>をまとめて初期化する場合に使用します。
具体例を上げると、下記のような形になります。</p>

<p>```vim
augroup MyAutoCmd
  autocmd! &ldquo; => このaugroupに紐づいたautocmdを消し去ります
augroup END</p>

<p>&hellip;</p>

<p>augroup MyAutoCmd
  autocmd BufNewFile * echo &lsquo;This is new file&rsquo;
  autocmd BufNewFile,BufRead *.haml setf haml
augroup END
```</p>

<p>こうすることで、2重に設定されることのない設定になります。</p>

<h2>もう一歩踏み込んでみる</h2>

<p>autocmdの設定方法をVimのRuntimeから学んでみましょう。</p>

<p><code>vim
:edit $VIMRUNTIME/filetype.vim
</code></p>

<p>これはファイルタイプの定義を行っているファイルです。</p>

<p>augroupが宣言されているので、一覧を<code>:autocmd filetypedetect</code>でみれることが分かります。</p>

<p>驚くことに、もの凄い数のコマンドを実行してファイルタイプを設定していることが分かります。</p>

<h3>ftdetectを知る</h3>

<p>filetype.vimにて<code>runtime! ftdetect/*.vim</code>と書かれており、<code>~/.vim/ftdetect/*</code>を読み込んでいることが分かります。</p>

<p>つまり、ファイルタイプの設定は<code>ftdetect</code>以下で設定するのがベターとされています。</p>

<p><code>vim
" ~/.vim/ftdetect/coffee.vim
autocmd BufNewFile,BufRead *.coffee    setf coffee
</code></p>

<p>といった設定にて、ファイルタイプを検出できるようになります。
<code>augroup filetypedetect</code>の宣言内なので、グループの宣言は不要です。</p>

<h2>本日の脱Vim中級者</h2>

<p>vimrcでファイルタイプの検出をしている方は、<code>~/.vim/ftdetect</code>以下に設定を移してみましょう。</p>
]]></content>
  </entry>
  
</feed>



