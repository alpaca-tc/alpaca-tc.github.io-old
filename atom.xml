<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RailsとRubyとVimのブログ]]></title>
  <link href="http://alpaca-tc.github.io/atom.xml" rel="self"/>
  <link href="http://alpaca-tc.github.io/"/>
  <updated>2013-12-16T03:36:43+09:00</updated>
  <id>http://alpaca-tc.github.io/</id>
  <author>
    <name><![CDATA[alpaca-tc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rubyのクラス変数について詰まったのでヘルプ]]></title>
    <link href="http://alpaca-tc.github.io/blog/ruby/ruby-class-variable.html"/>
    <updated>2013-12-16T01:10:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/ruby/ruby-class-variable</id>
    <content type="html"><![CDATA[<p>基本的に、仕事でクラス変数を扱うことはほぼ無いです。</p>

<p>今回は遊びのコードを書いていて、悩んだことをまとめました。</p>

<!-- more -->


<h1>Rubyのクラス変数の扱いが難しい&hellip;。</h1>

<p>これ、結構Ruby書いている自分でも初めて遭遇して悩む問題だった。</p>

<p>まず、次のような動くコードを書いてみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="vc">@@val</span> <span class="o">=</span> <span class="s1">&#39;Node&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Branch</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="vc">@@val</span> <span class="o">=</span> <span class="s1">&#39;Branch&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">Node</span><span class="o">.</span><span class="n">class_variable_get</span><span class="p">(</span><span class="s1">&#39;@@val&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Node&#39;</span>
</span><span class='line'><span class="nb">p</span> <span class="no">Branch</span><span class="o">.</span><span class="n">class_variable_get</span><span class="p">(</span><span class="s1">&#39;@@val&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Branch&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ふむ、それぞれの派生クラスでクラス変数が使えますね。</p>

<p>では、続いて基底クラスにもクラス変数を与えてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="vc">@@val</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="vc">@@val</span> <span class="o">=</span> <span class="s1">&#39;Node&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Branch</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="vc">@@val</span> <span class="o">=</span> <span class="s1">&#39;Branch&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">Node</span><span class="o">.</span><span class="n">class_variable_get</span><span class="p">(</span><span class="s1">&#39;@@val&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Branch&#39;</span>
</span><span class='line'><span class="nb">p</span> <span class="no">Branch</span><span class="o">.</span><span class="n">class_variable_get</span><span class="p">(</span><span class="s1">&#39;@@val&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Branch&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ooops!!! 派性クラス内のクラス変数が、基底クラス変数を参照しよる！！</p>

<h2>解決編</h2>

<p>やりたいことは、派生クラスの子クラスに共通の変数を持たせるということ。</p>

<p>うーん、意外と難しい！</p>

<p>どうもクラス変数という感じではなくなるけれど、こうするしかないのだろうか&hellip;。</p>

<p>メソッドにしてみたら、とっても気持ちが悪い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">val</span>
</span><span class='line'>      <span class="s1">&#39;Base&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">val</span>
</span><span class='line'>      <span class="s1">&#39;Node&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Branch</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">val</span>
</span><span class='line'>      <span class="s1">&#39;Branch&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">Node</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:val</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Node&#39;</span>
</span><span class='line'><span class="nb">p</span> <span class="no">Branch</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:val</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Branch&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだと、一応コードとして動く。 ただ、<strong>これは無いだろ感</strong>あるよね。</p>

<p>しかし、クラスインスタンス変数だと継承されないし、こうするしかないのかなぁ。</p>

<p><strong>だれか正しい方法があれば、教えてください！</strong> >_&lt;</p>

<h3>追記</h3>

<p>思いついたんだけど、継承するときにクラスインスタンス変数を渡せばいいのかな？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unite.vimとwatsonを使ったワークフロー]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/using-vim-unite-watson.html"/>
    <updated>2013-12-13T02:29:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/using-vim-unite-watson</id>
    <content type="html"><![CDATA[<p>最近、vim-unite-watsonを開発しました。</p>

<p>これが、watsonの作者であるnhmoodさんにも好評で、僕自身ワークフローが変化して、だいぶ作業しやすくなりました。</p>

<p>今回は、タスク管理をしたい人向けに、僕なりのワークフロー管理を紹介します。</p>

<!-- more -->


<h1>ワークフローとVim</h1>

<p>僕は普段、Webサービスの構築・保守を行う仕事をしています。</p>

<p>そこでは、基本的なフローは次のような流れです。</p>

<ol>
<li>新機能・バグに対してIssueを発行する(あるいは既にTODOリストにある)</li>
<li>トピックブランチを作る</li>
<li>コードを書く</li>
<li>コミット &ndash;> Pull-Requestを送る &ndash;> マージする</li>
</ol>


<p>では、Vimを一度も閉じることなくこれらの作業をしてみます。</p>

<h2>1. Issueの発行</h2>

<h3>1-1. TODOをコードに入力する</h3>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/workflow_1.png" title="本番環境用にViewを作成すると記入する" ></p>

<h3>1-2. IssueをGithubにあげる</h3>

<p>インラインIssue管理の<a href="http://alpaca-tc.github.io/blog/ruby/how-to-use-watson.html">watson</a>を使って、GithubにIssueをあげます</p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/workflow_2.png" title=":Watsonのデモ" ></p>

<p>Watsonを使えば、Vimから簡単にIssue管理を行うことが出来ますね。</p>

<h2>2. 作業の目処を立てる</h2>

<p>さて、これでIssueは挙げられたので、次はコードの改修をしていきます。</p>

<h3>2-1. トピックブランチを作る</h3>

<p>ブランチの作業は、<a href="https://github.com/alpaca-tc/vim-unite-giti">vim-unite-giti</a>を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>Unite giti/branch
</span></code></pre></td></tr></table></div></figure>


<p>新しいブランチの名前を入力して、<code>[checkout branch]</code>の行を選択します。</p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/workflow_3.png" title="Unite gitiのデモ" ></p>

<p>すると、新しいブランチが作られました。</p>

<h3>2-2. コードの改修を行う場所に印をつけて行く</h3>

<p>コードの改修は、多くの場合幾つかのファイルに跨がります。</p>

<p>そのため、経験から作業が必要な箇所に目処をつけて、コメントを書いて行きます。</p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/workflow_4.png" title="" ></p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/workflow_5.png" title="" ></p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/workflow_6.png" title="" ></p>

<p>todoの内容は、watsonによって管理されるので、vim-unite-watsonを使えば一覧としてみることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>Unite watson/dirty
</span></code></pre></td></tr></table></div></figure>


<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/workflow_7.png" title="unite-watsonのdemo" ></p>

<p>これで、issueを解決するために必要な作業の一覧を自分で作ることが出来ました。</p>

<p>Unite上のコメントを選択すると、該当箇所に飛べます。</p>

<p>後は、</p>

<ol>
<li>該当箇所に飛ぶ</li>
<li>コードを修正する</li>
<li>解決したら、コメントを削除する</li>
</ol>


<p>を<code>:Unite watson/dirty</code>が空になるまで繰り返します。</p>

<p>watsonの結果リストが空になれば、issueの問題を解決したことになり、次の作業に移ります。</p>

<h3>3. GithubにPull-Requestする</h3>

<p>これは、各々方法が分かれるかと思います。</p>

<p>Vimから出ないでPull-Requestを送るには、<code>:!git push</code> &amp;&amp; <code>:!hub pull-request -h ...</code>というのが一番分かりやすいでしょうか。</p>

<p>僕は、<code>:Unite giti/pull_request</code>で送るようにしています。</p>

<h2>まとめ</h2>

<p>Watsonやgitiはかなり便利です。</p>

<p>特に、watsonはコーディング作業をマネジメントしたい人に向いていると思います。
作業時間の見積もりや、タスク管理を考えながらコーディングする人には向いているプラグインなのではないでしょうか。</p>

<p>僕は経営学部にいるので、すっかりタスク管理や時間計測を気にしちゃうようになりました。。</p>

<p><strong>今回紹介したプラグイン</strong></p>

<ul>
<li><a href="https://github.com/alpaca-tc/vim-unite-watson.vim">vim-unite-watson</a></li>
<li><a href="https://github.com/kmnk/vim-unite-giti">vim-unite-giti (本家)</a></li>
<li><a href="https://github.com/alpaca-tc/vim-unite-giti">vim-unite-giti (giti/pull_request追加版)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NeoComplete vs YouCompleteMe]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/neocomplete-vs-youcompleteme.html"/>
    <updated>2013-12-10T00:04:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/neocomplete-vs-youcompleteme</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://atnd.org/events/45072">Vim Advent Calendar 2013</a>の10日目です。</p>

<p>先日は<a href="https://twitter.com/Linda_pp">@Linda</a>さんの<a href="http://rhysd.hatenablog.com/entry/2013/12/09/001219">無数のパッチを組み合わせて君だけの MacVim を作ろう！</a>でした。</p>

<p>大学卒業までに、自分専用Vimを作ろうと思っている自分にとって大変参考になる記事でした。</p>

<h1>NeoComplete VS YouCompleteMe</h1>

<p>さてさて、本日のAdvent CalendarではVimの補完プラグインの2大巨頭を比較してみようと思います。</p>

<!-- more -->


<ul>
<li><a href="https://github.com/Shougo/neocomplete.vim">NeoComplete</a> &ndash; (Shougoさん作)</li>
<li><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a> &ndash; (Valloricさん作)</li>
</ul>


<p>元々、僕は<strong>大のShougo wareファン</strong>です。(Sourceや、本体への貢献も少ししています)</p>

<p>そんな僕もVimを探求する気持ちから、ついYouCompleteMeに手を出してしまいました!!!</p>

<p><strong>「は&hellip;速いぞこいつ！！」</strong></p>

<p>その補完速度の衝撃さることながら、他にも素晴らしいことが。</p>

<p>つい、NeoCompleteからの乗り換えが脳裏をよぎり、2週間使ってみることにしました。</p>

<h2>何について書くの？</h2>

<p>結論から言うと、NeoCompleteに戻ってきました。</p>

<p>しかし、<strong>NeoCompleteに改善の余地がある</strong>ことに気付きました。</p>

<p>「YCMのここが良かったから、NeoCompleteに取り入れよう！」という話をしたいと思います。</p>

<h2>YouCompleteMeの良かった点</h2>

<ul>
<li><strong>補完が早い</strong></li>
<li><strong>ファイル補完</strong>が素晴らしい</li>
<li>設定がほぼ不要</li>
<li>jedi.vim / clang-completeとの連携が容易</li>
<li>fuzzy補完が使いやすい！</li>
<li>YCM、と略しやすい。←</li>
</ul>


<p>補完スピードに関しては、感動しました。</p>

<h3>ファイル補完機能</h3>

<p>特筆すべきはファイル補完機能についてです。</p>

<p>使ってわかる、YCMのファイル補完の素晴らしさ。</p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/file_complete.png" title="YCMのファイル補完機能" ></p>

<ul>
<li>&ldquo;[Dir], [File]&#8221;で、補完候補の種類を入力している</li>
<li>ファイル補完時、バッファ補完などのノイズが入らない</li>
</ul>


<p>今まで、NeoCompleteで満足していたんですが、YCMを使って初めて改善の余地があることに気付きました。</p>

<h2>YouCompleteMeの悪かった点</h2>

<ul>
<li>補完の種類が少ない</li>
<li>カスタマイズができない。</li>
<li>補完候補の<code>dup</code>フラグが全てオン</li>
</ul>


<p>いや、一応カスタマイズしてNeoCompleteの移植できたんですけどね。疲れました。</p>

<h2>NeoCompleteを改善する</h2>

<p>さて、YCMを使って2週間。良いところをいくつか取り入れましょう。</p>

<p><strong>(追記: ファイル補完に関する修正は、本家に取り込まれました)</strong></p>

<h3>1. file補完のノイズを改善する</h3>

<p>デフォルトのNeoCompleteのfile補完のrankが低いため、ファイル補完時に他の候補が上にきてしまいます。</p>

<p>ファイル補完の優先順位をあげましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">call</span> neocomplete#custom#source<span class="p">(</span><span class="s1">&#39;file&#39;</span><span class="p">,</span> <span class="s1">&#39;rank&#39;</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これに関しては、<strong>元々のファイル補完のrankがなぜ低いのか疑問</strong>です。理由があるのでしょうか。</p>

<h3>2. file補完で[Dir], [File]を表示する</h3>

<p>NeoCompleteに<a href="https://gist.github.com/qickstarter/7872458">パッチ</a>をあてます。</p>

<p>これで、YouCompleteMeと同じファイル補完を実現できます。</p>

<h3>3. 補完速度を向上する</h3>

<p>YCMでは、補完が少し止まる感覚が一切ありませんでした。</p>

<p>NeoCompleteはsourceを駆け巡って、頑張って補完候補を取得しているのである程度は仕方ないです。</p>

<p>ただ、自分の環境にあわせれば、補完スピードはあがるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; 極端な例ですが、下記のような操作で補完をチューニングできます</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 補完を始めるキーワード長を長くする</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#sources#<span class="nb">syntax</span>#min_keyword_length <span class="p">=</span> <span class="m">4</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#auto_completion_start_length <span class="p">=</span> <span class="m">4</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 補完が止まった際に、スキップする長さを短くする</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#skip_auto_completion_time <span class="p">=</span> <span class="s1">&#39;0.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 使用する補完の種類を減らす</span>
</span><span class='line'><span class="c">&quot; 現在のSourceの取得は `:echo keys(neocomplete#variables#get_sources())`</span>
</span><span class='line'><span class="c">&quot; デフォルト: [&#39;file&#39;, &#39;tag&#39;, &#39;neosnippet&#39;, &#39;vim&#39;, &#39;dictionary&#39;, &#39;omni&#39;, &#39;member&#39;, &#39;syntax&#39;, &#39;include&#39;, &#39;buffer&#39;, &#39;file/include&#39;]</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#sources <span class="p">=</span> {
</span><span class='line'>  \ <span class="s1">&#39;_&#39;</span> : [<span class="s1">&#39;vim&#39;</span><span class="p">,</span> <span class="s1">&#39;omni&#39;</span><span class="p">,</span> <span class="s1">&#39;include&#39;</span><span class="p">,</span> <span class="s1">&#39;buffer&#39;</span><span class="p">,</span> <span class="s1">&#39;file/include&#39;</span>]
</span><span class='line'>  \ }
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 特定のタイミングでのみ使う補完は、直接呼び出すようにする</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">X</span><span class="p">&gt;&lt;</span>C<span class="p">-</span>F<span class="p">&gt;</span>  neocomplete#start_manual_complete<span class="p">(</span><span class="s1">&#39;file&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">X</span><span class="p">&gt;&lt;</span>C<span class="p">-</span>K<span class="p">&gt;</span>  neocomplete#start_manual_complete<span class="p">(</span><span class="s1">&#39;dictionary&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">X</span><span class="p">&gt;</span><span class="k">s</span>      neocomplete#start_manual_complete<span class="p">(</span><span class="s1">&#39;neosnippet&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>浮気して、彼女の良さに気付くパターンです。</p>

<p>YCMを使って気付きました。なんだかんだ<strong>NeoCompleteが最高</strong>ですね！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インラインTODO管理のWatsonを使う]]></title>
    <link href="http://alpaca-tc.github.io/blog/ruby/how-to-use-watson.html"/>
    <updated>2013-12-03T23:49:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/ruby/how-to-use-watson</id>
    <content type="html"><![CDATA[<p>最近、Githubのトレンドにも入っていた<a href="http://goosecode.com/watson/">Watson</a>を紹介します。</p>

<!-- more -->


<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/watson.png" title="watsonのデモ" ></p>

<h2>インラインTODO管理とは何か</h2>

<p>もしあなたがエンジニアなら、次のようなコメントを見たことがあると思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">logged_in?</span>
</span><span class='line'>    <span class="c1"># TODO 管理ユーザーと処理を分ける</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように、コード内には至る所にコメントが書かれています。
単なるコードの説明に限らず、修正が必要な内容を記述したものも多くあります。</p>

<p>しかしながら、しばしばこういったコメントは放置され、コードの中に埋もれたままになってしまうこともあります。</p>

<p>Watsonは、コード内に書かれたコメントを走査し、近代的な管理ツールに流し込むことでIssueを管理するツールです。</p>

<h2>どうやって使うのか</h2>

<p>watsonを使って、コード内に記述されたコメントを洗い出して、GithubのIssueに登録してみましょう。</p>

<h3>ステップ1: watsonのインストール</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem install watson
</span></code></pre></td></tr></table></div></figure>


<h3>ステップ2: watsonの初期化</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>path/to/project_dir
</span><span class='line'><span class="nv">$ </span>watson
</span><span class='line'><span class="c"># 一旦&lt;Ctrl-C&gt;で終了してください。</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>.watsonrc</code>が自動的に作成されるので、プロジェクトに合わせて走査するディレクトリなどを設定します。</p>

<p>例として、Railsプロジェクト用の<a href="https://gist.github.com/7770689">.watsonrc</a>を貼付けておきます。</p>

<h3>ステップ3: watsonの実行！！</h3>

<p>watsonを使うときは、独自のタグを使ってコメントを書いておきます。</p>

<ul>
<li><code>[todo] - タスクの内容を記入する</code></li>
<li><code>[review] - 他の人に意見を求めるような内容を記入する</code></li>
<li><code>[fix] - バグの内容を記入する</code></li>
</ul>


<p>試しに、適当なファイルを開いて、上記のようなフォーマットでコメントを記入してみてください。</p>

<p>後は、再度<code>watson</code>と打って実行！</p>

<p>めでたしめでたし。
プロジェクト内のTODOなどが、一覧で出力されます。</p>

<h3>ステップ4: githubへIssue登録する</h3>

<p>先ほどの出力した内容を、Githubへ一括同期しましょう。</p>

<p>まず、Githubのリポジトリをwatsonに認識させます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>watson --remote github
</span></code></pre></td></tr></table></div></figure>


<p>英語のコメントに沿って、情報を入力していきましょう。</p>

<p>続いて、Issueを登録します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>watson --update
</span></code></pre></td></tr></table></div></figure>


<p>処理が終わると、Githubのissueへの登録が完了です。</p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/watson_issue_preview.png" title="githubのissueプレビュー" ></p>

<h2>まとめ</h2>

<p>watsonは先月ぐらいに注目され始めた新しいプロジェクトです。</p>

<p>今後は、コメントを活用して様々な処理を行えるように拡張されると思うので、動向が楽しみですね。</p>

<h3>watsonの現状</h3>

<ul>
<li>Ruby初心者の人が作ったため、コードがよろしくない(PR中)</li>
<li>今のところ対応している管理ツールは、githubとbitbucket。</li>
<li>安定版に必要な機能が未実装。なので、新機能のPRがなかなか取り入れられない状況。数ヶ月待たないといけなさそう。</li>
<li>対応しているファイルタイプがまだ少ない</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guard-shellが便利だった話]]></title>
    <link href="http://alpaca-tc.github.io/blog/ruby/the-story-about-guard-shell.html"/>
    <updated>2013-11-23T01:34:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/ruby/the-story-about-guard-shell</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/guard/guard">Guard</a>って便利ですよねー。</p>

<p>あの、ファイルをwatchして、変更を検知したらアクションをグルグル回すやつです。</p>

<p>最近Vimの開発をしていて、あー変更と同時にコンパイルしてくれたらいいのになぁ。</p>

<p>Guardを使って実現してみました。</p>

<!-- more -->


<h1>guard + guard-shell</h1>

<p>おなじみのGuardにshellコマンドを実行できるようにします。</p>

<p><em>GuardでC言語を自動コンパイル！！！</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard-shell&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Guardfile</span>
</span><span class='line'><span class="n">group</span> <span class="ss">:vim3</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">guard</span> <span class="ss">:shell</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">target_dir</span> <span class="o">=</span> <span class="s1">&#39;vim-3\.0/src&#39;</span>
</span><span class='line'>    <span class="n">watch</span><span class="p">(</span><span class="sr">%r!^</span><span class="si">#{</span><span class="n">target_dir</span><span class="si">}</span><span class="sr">/(.+)\.(c|h)!</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="sb">`cd </span><span class="si">#{</span><span class="n">target_dir</span><span class="si">}</span><span class="sb"> &amp;&amp; make`</span>
</span><span class='line'>      <span class="sb">`cd </span><span class="si">#{</span><span class="n">target_dir</span><span class="si">}</span><span class="sb"> &amp;&amp; make debug`</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイントは、<em>group</em>と<em>guard :shell &hellip;</em>ですね。</p>

<h2>guardのDSL <em>group</em></h2>

<p>groupのDSLを使うと、guardの設定を切り替えることができます。</p>

<p>例えば、バージョン毎にgroupで設定をわけておけば、不必要な部分でguardが動作することを防ぐことができます。
僕の場合は、vimのバージョン毎に設定を切り替えることで不必要なコンパイルを防いでいます。</p>

<p>また、分けてあるgroupを切り替えるときは、guardのコンソールで<code>scope vim3</code>と打てば切り替わります。</p>

<p>(起動時にscopeを指定する場合は、<code>guard --group vim3</code>)</p>

<h2>guard-shellを使う</h2>

<p>guard-shellは、ファイルの変更をフックにしてshellコマンドを実行するgemです。</p>

<p>と、あたかもshellに特化したネーミングですが、実際はただ単にwatchに渡したブロックを評価するだけのシンプルなやつです。</p>

<p>下記のようにすれば、ファイルが保存されたと同時に<code>hogepiyoooooooooooooo</code>と教えてくれます。
わーい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Guardfile</span>
</span><span class='line'><span class="n">guard</span> <span class="ss">:shell</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">/.*/</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="sb">`say hogepiyoooooooooooooo`</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p><em>guard-shell便利。</em></p>

<p>(ホゲピヨーーーーーって言うのかと思ったら、「ホージピュゥ」って何か冷めた感じに返された。。。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimを勉強し始めました #1]]></title>
    <link href="http://alpaca-tc.github.io/blog/learning_vim/i-begin-to-lean-vim-1.html"/>
    <updated>2013-11-21T09:11:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/learning_vim/i-begin-to-lean-vim-1</id>
    <content type="html"><![CDATA[<h1>Vim読書会 #1</h1>

<p>先日から続けているVim読書会(一人)ですが、
今回からモチベーションのために記事にあげて行おうと思います。</p>

<p><em>本日読むソースコード</em></p>

<p><strong>Vim-0.3</strong></p>

<ul>
<li>cmdline.c</li>
<li>cmdtab.h</li>
<li>cmdcmds.c</li>
</ul>


<!-- more -->


<h2>cmdline.c L3723行</h2>

<p>cmdline.c: functions for reading in the command line and executing it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// L650:</span>
</span><span class='line'><span class="k">static</span> <span class="n">char_u</span> <span class="o">*</span> <span class="n">DoOneCmd</span><span class="p">(</span><span class="n">buff</span><span class="p">)</span> <span class="n">char_u</span> <span class="o">*</span><span class="n">buff</span><span class="p">;</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>この関数で、コマンドラインからの入力を処理してます。
関数の前半部分で入力をパースして、後半部分でコマンドを分岐しています。</p>

<p>分岐部分はこんな感じですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">L1111:</span>
</span><span class='line'><span class="nl">cmdswitch:</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">cmdidx</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * quit current window, quit Vim if closed the last window</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">CMD_quit</span>:
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">CMD_qall</span>:
</span><span class='line'>      <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>:quit</code>の処理を変更したかったら、<code>case CMD_quit</code>以下を変更すればいいです。</p>

<h2>cmdtab.h L337行</h2>

<p>また、<code>CMD_...</code>といった定数は<code>cmdtab.h</code>で初期化されており、全てのコマンドが定義されています。
コマンドは、ユニークなID,コマンド名,受け付ける引数がここで定義されます。</p>

<p>そのコマンドの実際の動作は、<code>cmdline.c</code>にべた書きされているという感じでしょうか。</p>

<p>Vim-3.0の書き方だと、コマンドがひとつ増える度に<code>cmdline.c</code>の分岐がひとつ増えるというヘビーな書き方なので、新しいバージョンではリファクタリングされてそう。</p>

<h2>cmdcmds.c L541行</h2>

<p>cmdcmds.c: functions for command line commands</p>

<p><code>cmdcmds.c</code>は、<code>cmdline.c</code>でのコマンドの分岐で重なる部分の関数をまとめたもの、といった印象です。
Wordpressでいうfunctionsのような感じかな。一応、他の場所でも使える感じに仕上がっています。</p>

<p>この中には、<code>do_align</code>や<code>doshell</code>といった、想像につく名前の関数がありますね。
<code>CMD_move</code>で分岐した場合は、こちらに飛ばされます。</p>

<h2>まとめ</h2>

<p>コマンド関連の細かい実装を見るのは大変ですが、全体的に見ると読みやすかったです。
Vimのオプションやコマンド名が、そのまま変数に使われているので読みやすかったです。</p>

<p><code>:echo</code>などのコマンドを追加する場合は、ここら辺を弄るだけでなんとかなりそうですね！
次回トライしてみます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[そろそろVimを使いこなせるようになりたい。]]></title>
    <link href="http://alpaca-tc.github.io/blog/learning_vim/i-begin-to-learn-vim.html"/>
    <updated>2013-11-15T06:58:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/learning_vim/i-begin-to-learn-vim</id>
    <content type="html"><![CDATA[<h1><strong>「俺、ちゃんとVimやるわ」</strong></h1>

<p>&hellip;と、夏の途中に宣言してからというもの、</p>

<p>「仕事がー」、「友達がー」、「本をー」と、何かと理由をつけて結局やってませんでした。。。</p>

<p>m(_ _)m &lt; 怠惰な人間です。クズです。生きててすみません。。。</p>

<p>はい。</p>

<p>今日からちゃんとVimと向き合いたいと思います。</p>

<!-- more -->


<h2>そして、僕は2歳のころの時代へ&hellip;</h2>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/2013_11_15.png" title="The version of Vim" ></p>

<p>1994年というと、僕がおもらしをして20万円ぐらいするPCを破壊したぐらいの時期でしょうか。</p>

<p>これから、VimをVersion4に向けて再構築していきたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim中級者を脱する スコープ編]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/break-vim-beginners-scope.html"/>
    <updated>2013-11-13T17:26:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/break-vim-beginners-scope</id>
    <content type="html"><![CDATA[<p>個人的に、Vimで一番ハマったのが<strong>スコープの問題</strong>でした。</p>

<p>vimrcのコピペばかりの、あなた。</p>

<p>せめて、よく登場するスコープだけでも理解してみましょう。</p>

<!-- more -->


<h1>よく見るスコープ一覧</h1>

<ul>
<li><em>グローバル</em>スコープ　<code>g:</code></li>
<li><em>関数内</em>スコープ　<code>a:</code></li>
<li><em>スクリプト</em>スコープ　<code>s:</code></li>
<li><em>バッファ</em>スコープ　<code>b:</code></li>
<li><em>接頭辞なし</em>　<code>let huga=...</code>など</li>
</ul>


<h2>グローバル(g:)スコープ</h2>

<p><strong>どこからでも参照できます。</strong></p>

<p>プラグインの設定で見慣れたスコープですね。</p>

<p><code>let g:neocomplete#enable_at_startup = 1</code></p>

<p>変数を初期化するには、次のようにします。
大量のエラーコードによって操作できなくなるので、<strong>嫌いな人のvimrcの末尾に書き込んでください。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">for</span> <span class="nb">key</span> <span class="k">in</span> keys<span class="p">(</span><span class="k">g</span>:<span class="p">)</span>
</span><span class='line'>  execute <span class="s1">&#39;unlet g:&#39;</span> . <span class="nb">key</span>
</span><span class='line'><span class="k">endfor</span>
</span></code></pre></td></tr></table></div></figure>


<h2>関数内(a:)スコープ</h2>

<p><strong>関数内で、引数を参照するときに使用するスコープ</strong></p>

<p>個人的に一番理解しがたいスコープです。</p>

<p>こんな感じで使います。他言語から移ってきた人には、正直使いづらい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> Huga<span class="p">(</span><span class="k">first</span><span class="p">,</span> second<span class="p">)</span>
</span><span class='line'>  echo <span class="k">a</span>:<span class="k">first</span>
</span><span class='line'><span class="c">  &quot;=&gt; &#39;a&#39;</span>
</span><span class='line'>
</span><span class='line'>  echo <span class="k">a</span>:
</span><span class='line'><span class="c">  &quot;=&gt; {&#39;0&#39;: 0, &#39;000&#39;: [], &#39;second&#39;: &#39;b&#39;, &#39;first&#39;: &#39;a&#39;, &#39;firstline&#39;: 5, &#39;lastline&#39;: 5}</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">call</span> Huga<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>「あーなるほど、<strong>関数内でだけ有効なスコープなのか。</strong>」</p>

<p>と、思っていたら<em>それは間違い。</em></p>

<p>下記のようにすると、<strong>グローバルスコープとして参照できます。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">a</span>:huga<span class="p">()</span>
</span><span class='line'>  echo <span class="s1">&#39;Global!?!?!?&#39;</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">call</span> <span class="k">a</span>:huga<span class="p">()</span> <span class="c">&quot; =&gt; Global!?!?!?</span>
</span></code></pre></td></tr></table></div></figure>


<p>実は、これ関数名に<code>:</code>が許可されているだけです。
なので実際は<code>a:</code>スコープは関係ないんだけど、分かりづらい。</p>

<h2>スクリプト(s:)スコープ</h2>

<p><strong>ファイル内でのみ有効なスコープ</strong>です。</p>

<p>プラグインで、プライベートなメソッドや定数を作るときによく使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">s</span>:script_scope <span class="p">=</span> <span class="s1">&#39;外部からは参照できない&#39;</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:script_scope_method<span class="p">()</span>
</span><span class='line'><span class="c">  &quot; プライベートメソッドとしてよく使われる</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>この<code>s:</code>は、スクリプトがsourceされるときに置き換えられ、<code>&lt;SNR&gt;1_...</code>という感じの形になります。</p>

<p>えぇ、そうです。すると、<strong>グローバルなスコープとして参照できます。</strong></p>

<p>この<code>&lt;SNR&gt;</code>の後にどの数値が割り振られているかは、<code>:scriptnames</code>で参照できます。</p>

<p>また、<code>s:</code>は<code>&lt;SID&gt;</code>として使えばスコープを超えて使用できるようになります。</p>

<p>マッピングの時に、scriptスコープを使う時などは必須ですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">nnoremap</span> <span class="k">s</span> :echo <span class="p">&lt;</span>SID<span class="p">&gt;</span>SID<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただし、<strong>変数は基本的には聖域</strong>です。</p>

<h2>バッファ(b:)スコープ</h2>

<p><strong>バッファ単位のスコープ</strong>です。</p>

<p>ファイルタイプによる設定や、一時バッファによる変数などに使います。</p>

<ul>
<li>ファイルタイプの変更で、<code>b:current_syntax</code>などが初期化&amp;格納されます</li>
<li>Uniteを起動で、<code>b:unite</code>にデータが格納されます。</li>
</ul>


<p>Uniteのデバッグするときには、<code>echo b:unite.candidates</code>などを参照しましょう。</p>

<p>あぁ、ようやくまともなスコープだ。</p>

<h2>接頭辞なし(<code>let huga=</code>)変数</h2>

<p>えぇ。<strong>グローバルなスコープです。</strong></p>

<p>お前もか！</p>

<p>マナーとしては、やはり<code>g:</code>で宣言したいところですが、</p>

<p>Vimにデフォルトで入っているプラグインは、容赦なくこの変数を使ってきます。</p>

<p><code>:echo loaded_*&lt;Tab&gt;</code>などすれば、奴らを見つけられるはずです。</p>

<p>細かいことを言えば、関数内ならばローカルスコープです。。。</p>

<h2>スコープのまとめ</h2>

<ul>
<li>スコープは<strong>ほとんどグローバルで参照できる</strong></li>
<li>VimLは枠にハマらない<strong>素敵な</strong>言語仕様を持っている</li>
<li>getbufvar()などでスコープへアクセス出来るため、<strong>聖域はほとんど無い</strong></li>
</ul>


<p><strong>正直今でも理解出来ていない。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript補完プラグインのTernはすごいヤツ]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/how-to-use-tern-vim.html"/>
    <updated>2013-11-13T14:40:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/how-to-use-tern-vim</id>
    <content type="html"><![CDATA[<p><strong>「え、JavaScriptを書いているのに、Tern使ってないの？」</strong></p>

<p>ダサい。イケてない。
あぁ、残念。</p>

<!-- more -->


<p><a href="https://github.com/marijnh/tern">Tern</a>は、marijnhという凄いエンジニアの人が作っている<strong>JavaScriptの動的補完プラグイン</strong></p>

<p>コードを動的にパースして、今カーソルがある変数の型まで調べて補完しちゃってくれる。</p>

<p>設定をすれば、jQueryなどのプラグインでの諸々も補完しちゃう凄いやつなのだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> has<span class="p">(</span><span class="s1">&#39;python&#39;</span><span class="p">)</span> &amp;&amp; executable<span class="p">(</span><span class="s1">&#39;npm&#39;</span><span class="p">)</span>
</span><span class='line'>  NeoBundleLazy <span class="s1">&#39;marijnh/tern_for_vim&#39;</span><span class="p">,</span> {
</span><span class='line'>        \ <span class="s1">&#39;build&#39;</span> : <span class="s1">&#39;npm install&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>        \   <span class="s1">&#39;functions&#39;</span>: [<span class="s1">&#39;tern#Complete&#39;</span><span class="p">,</span> <span class="s1">&#39;tern#Enable&#39;</span>]<span class="p">,</span>
</span><span class='line'>        \   <span class="s1">&#39;filetypes&#39;</span> : <span class="s1">&#39;javascript&#39;</span>
</span><span class='line'>        \ }}
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>まぁ、何はともあれ一度使ってみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimを使って新人教育]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/training-of-new-employee.html"/>
    <updated>2013-11-11T05:21:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/training-of-new-employee</id>
    <content type="html"><![CDATA[<p>嬉しいことに、一緒に働く仲間が2人増えました。</p>

<p>まだRubyに慣れていないそうなので、はじめの一ヶ月は教育期間を挟みます。</p>

<p>新人の方もvimmerなので、そのためのプラグインを作りました。</p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/11_11.png" title="Vimのデモ" ></p>

<p><strong><a href="https://github.com/enfactv/assignment">assignment.vim</a></strong></p>

<!-- more -->


<p>インストールはごく簡単です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;alpaca-tc/assignment&#39;</span>`
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:assignment#<span class="nb">path</span> <span class="p">=</span> expand<span class="p">(</span><span class="s1">&#39;~/path/to/assignment&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>良かったこと</h3>

<ul>
<li>GitHubの使い方がわからなくても、Vimから徐々に取り組めること</li>
<li>問題のやり取りが楽になったこと</li>
<li>自動テストがあるので、リモート勤務でも採点できること</li>
</ul>


<h3>悪かったこと</h3>

<ul>
<li>一問一答の形式って効率悪いよね&hellip;</li>
</ul>


<p>とりあえず一ヶ月はこの形式で進めて、Rubyに慣れてもらおうかと思います。</p>

<h2>まとめ</h2>

<p>正直、今日は書くことがなかっただけです。えへ。
暇だなー、俺初級者かなーと思う方が入れば、試しに問題に挑戦してみてください。</p>

<ol>
<li>プラグインをインストール</li>
<li><code>:AssignmentInit ~/インストール先ディレクトリ</code>を実行して初期化</li>
<li>vimrcに<code>let g:assignment#path = expand('~/path/to/assignment')</code>を追加</li>
<li><code>:Assignment solve &lt;tab&gt;</code>で問題を選択</li>
<li>Guardをまわしながら解くのみ！</li>
</ol>


<p>初めは、8クイーン問題や、RubyのDSLを作る問題などです。
初級者向けですが、少しは暇つぶしにはなると思いますよ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オススメなVimのプラグイン紹介]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/plugins-best-of-vim-1.html"/>
    <updated>2013-11-07T05:22:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/plugins-best-of-vim-1</id>
    <content type="html"><![CDATA[<p>普段使っているプラグインの中で、<em>これはイケてる！</em>と思ったプラグインを4つ紹介。</p>

<!-- more -->


<h2><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></h2>

<ul>
<li><code>{}</code>、<code>()</code>などの、対応する文字を<em>自働入力</em></li>
<li>括弧の片方が消えた時や、重複する時に<em>自働で調整してくれる</em></li>
<li><code>innoremap ( ()&lt;Left&gt;</code>とか未だにやっているのダサくない？</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; [本家](https://github.com/jiangmiao/auto-pairs)</span>
</span><span class='line'><span class="c">&quot; Lazy loading用に修正済み</span>
</span><span class='line'>NeoBundleLazy <span class="s1">&#39;alpaca-tc/auto-pairs&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>      \ <span class="s1">&#39;insert&#39;</span>: <span class="m">1</span> }}
</span><span class='line'>
</span><span class='line'><span class="k">let</span> hooks <span class="p">=</span> neobundle#get_hooks<span class="p">(</span><span class="s1">&#39;auto-pairs&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> hooks.on_post_source<span class="p">(</span>bundle<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> auto_pairs#try_init<span class="p">()</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>unlet hooks
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/junegunn/vim-easy-align">vim-easy-align</a></h2>

<ul>
<li>使いやすさ抜群の<em>整列用プラグイン</em></li>
<li><code>Alignta</code>がメジャーだけど、正直使いにくいよね。</li>
</ul>


<p><img class="image_on_frame center" src="https://raw.github.com/junegunn/i/master/vim-easy-align.gif" title="vim-easy-align DEMO" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundleLazy <span class="s1">&#39;junegunn/vim-easy-align&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span>: {
</span><span class='line'>      \ <span class="s1">&#39;commands&#39;</span> : [<span class="s1">&#39;EasyAlign&#39;</span>] }}
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/Yggdroot/indentLine">indentLine</a></h2>

<ul>
<li>イケてる、<em>インデント表示プラグイン</em></li>
<li><code>vim-indent-guides</code>は画面がうるさくなるから嫌！っていう人向け</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> has<span class="p">(</span><span class="s1">&#39;conceal&#39;</span><span class="p">)</span>
</span><span class='line'>  NeoBundleLazy <span class="s1">&#39;Yggdroot/indentLine&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>        \   <span class="s1">&#39;commands&#39;</span> : [<span class="s1">&#39;IndentLinesReset&#39;</span><span class="p">,</span> <span class="s1">&#39;IndentLinesToggle&#39;</span>]<span class="p">,</span>
</span><span class='line'>        \   <span class="s1">&#39;filetypes&#39;</span>: <span class="k">g</span>:my.<span class="nb">ft</span>.program_files<span class="p">,</span>
</span><span class='line'>        \ }}
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/terryma/vim-multiple-cursors">vim-multiple-cursors</a></h2>

<ul>
<li>SublimeTextの複数マーク&amp;同時編集 の機能を実現するプラグイン</li>
<li>実装に関しては完全に「こいつ無茶しやがって&hellip;」状態。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundleLazy <span class="s1">&#39;terryma/vim-multiple-cursors&#39;</span><span class="p">,</span> { <span class="s1">&#39;autload&#39;</span>: {
</span><span class='line'>      \ <span class="s1">&#39;function_prefix&#39;</span>: <span class="s1">&#39;multiple_cursors&#39;</span><span class="p">,</span>
</span><span class='line'>      \ }}
</span></code></pre></td></tr></table></div></figure>


<p>今回紹介したプラグインは、かなりシンプルに洗練されています。
使っているだけでも、作者の男前さを感じられる。そんなプラグインだと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim中級者を脱する augroup編]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/break-vim-beginners-augroup.html"/>
    <updated>2013-11-02T02:30:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/break-vim-beginners-augroup</id>
    <content type="html"><![CDATA[<h2>augroup, autocmdを理解する</h2>

<p><strong>所要時間 3分</strong></p>

<h3>この記事を読むべき人</h3>

<ul>
<li><code>augroup</code>を理解していない人</li>
<li><code>:source</code>コマンドを使う人</li>
</ul>


<!-- more -->


<h2>そもそもautocmdって？</h2>

<p>これは何をしているコマンドなのか分解してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>autocmd <span class="nb">BufNewFile</span> * echo <span class="s1">&#39;This is new file&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>autocmdのコマンドを開始しますよ</li>
<li><code>BufNewFile</code>というタイミングでこのコマンドを実行しますよ</li>
<li>全てのバッファで<code>echo 'This is new file'</code>を実行しますよ</li>
</ol>


<p>となります。</p>

<p>このように、保存時や新規のファイルといったタイミングでコマンドを実行できます。</p>

<h2>では、augroupはなんのために存在するの？</h2>

<p><code>augroup</code>は、<code>autocmd</code>をグループでまとめるためのコマンドです。こんな感じて使われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>augroup EditNewFile
</span><span class='line'>  autocmd<span class="p">!</span>
</span><span class='line'>  autocmd <span class="nb">BufNewFile</span> * echo <span class="s1">&#39;This is new file&#39;</span>
</span><span class='line'>augroup END
</span></code></pre></td></tr></table></div></figure>


<p>例えば、<code>autocmd</code>が設定されているvimrcを、<code>:source ~/.vimrc</code>で再度読み込むとしましょう。</p>

<p>するとどうなるかというと、通常は<strong><code>autocmd</code>が重複して2度設定されます</strong>
当然、その<code>autocmd</code>が発火するときに2度実行されるので、実行が遅くなります。</p>

<p>それを防ぐために<code>augroup</code>を使います。</p>

<h2>ベストプラクティスは？</h2>

<p>つまるところ、<code>augroup</code>は<code>autocmd</code>をまとめて初期化する場合に使用します。
具体例を上げると、下記のような形になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>augroup MyAutoCmd
</span><span class='line'>  autocmd<span class="p">!</span> <span class="c">&quot; =&gt; このaugroupに紐づいたautocmdを消し去ります</span>
</span><span class='line'>augroup END
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>augroup MyAutoCmd
</span><span class='line'>  autocmd <span class="nb">BufNewFile</span> * echo <span class="s1">&#39;This is new file&#39;</span>
</span><span class='line'>  autocmd <span class="nb">BufNewFile</span><span class="p">,</span><span class="nb">BufRead</span> *.haml <span class="k">setf</span> haml
</span><span class='line'>augroup END
</span></code></pre></td></tr></table></div></figure>


<p>こうすることで、2重に設定されることのない設定になります。</p>

<h2>もう一歩踏み込んでみる</h2>

<p>autocmdの設定方法をVimのRuntimeから学んでみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>edit $VIMRUNTIME/<span class="k">filetype</span>.<span class="k">vim</span>
</span></code></pre></td></tr></table></div></figure>


<p>これはファイルタイプの定義を行っているファイルです。</p>

<p>augroupが宣言されているので、一覧を<code>:autocmd filetypedetect</code>でみれることが分かります。</p>

<p>驚くことに、もの凄い数のコマンドを実行してファイルタイプを設定していることが分かります。</p>

<h3>ftdetectを知る</h3>

<p>filetype.vimにて<code>runtime! ftdetect/*.vim</code>と書かれており、<code>~/.vim/ftdetect/*</code>を読み込んでいることが分かります。</p>

<p>つまり、ファイルタイプの設定は<code>ftdetect</code>以下で設定するのがベターとされています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; ~/.vim/ftdetect/coffee.vim</span>
</span><span class='line'>autocmd <span class="nb">BufNewFile</span><span class="p">,</span><span class="nb">BufRead</span> *.coffee    <span class="k">setf</span> coffee
</span></code></pre></td></tr></table></div></figure>


<p>といった設定にて、ファイルタイプを検出できるようになります。
<code>augroup filetypedetect</code>の宣言内なので、グループの宣言は不要です。</p>

<h2>本日の脱Vim中級者</h2>

<p>vimrcでファイルタイプの検出をしている方は、<code>~/.vim/ftdetect</code>以下に設定を移してみましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopressとセットで入れておきたいVimプラグインまとめ]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/octopress_and_vimplugin.html"/>
    <updated>2013-11-01T17:06:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/octopress_and_vimplugin</id>
    <content type="html"><![CDATA[<p>Octopressは利用者が一部なので、デフォルトのVimではなにも対応していません。
プラグイン無しでも利用することもできますが、正直使いにくいですよね。</p>

<p>最低限下記のプラグインぐらいは入れておきましょう。</p>

<!-- more -->


<h2><a href="https://github.com/tpope/vim-liquid">vim-liquid</a></h2>

<p><code>liquid</code>はoctopress(jekyll)で採用されているテンプレートエンジンです。</p>

<p>このプラグインを入れると、ファイルタイプの検知や、キーワードのハイライトをしてくれるようになります。
何が良いかというと、そのおかげで<code>neocomplete.vim</code>や<code>matchit.vim</code>などの他のプラグインもliquid用に対応してくれるんですよね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundleLazy <span class="s1">&#39;tpope/vim-liquid&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>      \ <span class="s1">&#39;filetypes&#39;</span> : <span class="s1">&#39;liquid&#39;</span>
</span><span class='line'>      \ }}
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/tangledhelix/vim-octopress">vim-octopress</a></h2>

<p>VimからOctopressのコマンド操作をするプラグインです。
<code>:Octopress [command][{option}]</code>で実行することができます。</p>

<ol>
<li><code>:Octopress new_post title</code></li>
<li><code>:Octopress gen_deploy</code></li>
</ol>


<p>この2回の操作で、新しい記事をアップロードできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundleLazy <span class="s1">&#39;tangledhelix/vim-octopress&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>      \ <span class="s1">&#39;commands&#39;</span>: <span class="s1">&#39;Octopress&#39;</span><span class="p">,</span>
</span><span class='line'>      \ }}
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/alpaca-tc/alpaca_octopress.vim">alpaca_octopress</a></h2>

<p><code>vim-octopress</code>の非同期実行版です。
人柱属性のある方はこちらをオススメします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundleLazy <span class="s1">&#39;alpaca-tc/alpaca_octopress.vim&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>      \ <span class="s1">&#39;branch&#39;</span>: <span class="s1">&#39;v0.3&#39;</span><span class="p">,</span>
</span><span class='line'>      \ <span class="s1">&#39;functions&#39;</span> : <span class="s1">&#39;octopress#complete&#39;</span><span class="p">,</span>
</span><span class='line'>      \ <span class="s1">&#39;commands&#39;</span>: {
</span><span class='line'>      \   <span class="s1">&#39;name&#39;</span> : <span class="s1">&#39;Octopress&#39;</span><span class="p">,</span>
</span><span class='line'>      \   <span class="s1">&#39;complete&#39;</span> : <span class="s1">&#39;customlist,octopress#complete&#39;</span><span class="p">,</span>
</span><span class='line'>      \ }<span class="p">,</span>
</span><span class='line'>      \ }}
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>Octopressはかなりエンジニアと相性が良いプロジェクトだと思います。
ついでにVimmerの方は、これらのプラグインを入れてより親和性を高めましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[３日で検索1位になりました]]></title>
    <link href="http://alpaca-tc.github.io/blog/seo/no1_alpaca_engineer.html"/>
    <updated>2013-11-01T02:29:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/seo/no1_alpaca_engineer</id>
    <content type="html"><![CDATA[<p>二日前のブログにて
こんなことを言っていたんですが、</p>

<blockquote><h3>2. SEOで遊びたい</h3>

<p>そろそろ、「アルパカ エンジニア」や幾つかのキーワードが欲しいです。</p></blockquote>

<p>ブログを初めて3日目にて、はやくも<strong>検索結果が1位</strong>になりました！</p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/seo_no_1.png" title="アルパカエンジニア SEO 1位" ></p>

<p>超ニッチなワードだと、タイトルの一致率高めてやれば一瞬なんですね〜。
僕の他にもアルパカを名乗るエンジニアブログが居たのですが、順位を抜いたのでやっと胸を張れます。(何に)</p>

<p>早くも、ブログを始めた目的の一つが終わりましたw</p>

<p>やりたいことのために、他にも幾つかのキーワードで上位に出るようにしたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[alpaca_octopress続き]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/alpaca_octopress/about_alpaca_complete.html"/>
    <updated>2013-10-30T04:34:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/alpaca_octopress/about_alpaca_complete</id>
    <content type="html"><![CDATA[<p>octopress用のプラグイン<em>alpaca_octopress.vim</em>をガシガシ作っています。
コマンドの非同期実行、サイトのプレビュー、etc&hellip;全てをVimで完結しつつあります！</p>

<p>ある程度完成したら、Vim使いがOctopressを5分で構築出来るようなプラグインも同封するつもり。
全てVimで完結するのはVimmerにとっては楽でいいなぁ〜。</p>

<h2>OctopressTweet!!</h2>

<p>そして今から<code>:OctopressTweet</code>を実行して、この投稿がTweetされることを望みます。
無事Tweet出来たらまさに完結ですね。うりゃ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[alpaca_octopressを作っている]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/alpaca_octopress/create_new_plugin_for_octopress.html"/>
    <updated>2013-10-29T04:52:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/alpaca_octopress/create_new_plugin_for_octopress</id>
    <content type="html"><![CDATA[<p>昨日言った通り、今は<a href="https://github.com/alpaca-tc/alpaca_octopress.vim">alpaca_octopress.vim</a>を作っています</p>

<!-- more -->


<p>ブランチは<code>v0.3</code>が最新ですね。</p>

<h2>使い方</h2>

<p><code>:Octopress [command] {option}</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; 設定はこんな感じ</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:octopress#rake_command <span class="p">=</span> <span class="s1">&#39;bundle exec rake&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:octopress#project_url <span class="p">=</span> expand<span class="p">(</span><span class="s1">&#39;~/project/octopress&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:octopress#system#async <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Octopress関連で<code>deploy</code>とか<code>async</code>とかをよく使うけど、このプラグインを入れれば非同期で実行できます。
新しく記事書くときは、<code>:Octopress new_post 新しい記事</code>とやればどのディレクトリに居ても起動出来るので、記事を書くのがちょっと楽になります。</p>

<h2>初めてのvital.vim</h2>

<p>このプラグインを作る上で、初めて<a href="https://github.com/vim-jp/vital.vim">vital.vim</a>さんを使ってみました。
vitalは、JavaScriptでいうjQueryみたいに、これはベストな書き方！というコードを寄せ集めたスクリプト集です。</p>

<p>今回は、プロセスをオブジェクト化して、非同期で実行&amp;管理するために使ってみました。
触ってみた感じ、まだまだ人柱感が強いです。。</p>

<p>荒削りというか、汎用的というか、、Process周りのvitalはまだまだ利用者がいないのだろうと思います。
vimproc周りの動作もおかしいようだし、Vimからプロセス操作するのはやっぱり難しいね！</p>

<hr />

<p><code>:Octopress deploy</code>っと！</p>

<p>さて、寝よう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初めました]]></title>
    <link href="http://alpaca-tc.github.io/blog/diary/start_blog.html"/>
    <updated>2013-10-27T23:12:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/diary/start_blog</id>
    <content type="html"><![CDATA[<p>記念すべき初カキコ。
さて、技術ブログは今までQiitaを使っていましたが、そちらを辞めて自分のブログを作ることにしました。</p>

<h2>乗り換える2つの理由</h2>

<!-- more -->


<h3>1. Qiitaは使いにくい</h3>

<p>皆さんも薄々感じていると思いますが、QiitaのUIは使いにくいです。だってVimから出るんだもん。</p>

<h3>2. SEOで遊びたい</h3>

<p>そろそろ、「アルパカ エンジニア」や幾つかのキーワードが欲しいです。</p>

<h3>3. 対外アピールできない</h3>

<p>Qiitaで見ても、「この人どんな人？」って分からないですよね。それは楽しくないし、勿体ない。</p>

<p>なので、<strong>Vimで完結</strong> + <strong>アルパカなエンジニア</strong>をアピールするためにブログにしたいと思います。</p>

<h2>Octopress + Vim</h2>

<p>Vimから記事を書いて、Vimからデプロイしてます。
Octopressを簡単に操作できるように<a href="https://github.com/alpaca-tc/alpaca_octopress.vim">プラグイン</a>を作りました。
あぁ、簡単でいいですね。</p>

<p><code>:Octopress new_post 新しい記事の名前</code></p>

<h2>アルパカなエンジニアを目指す</h2>

<p>しばらくの目標です。
半年ぐらいで、「アルパカ + エンジニア」のキーワードで1位取れればなぁと思います。
そして、HPのデザインもアルパカな感じにしていきます！</p>
]]></content>
  </entry>
  
</feed>
