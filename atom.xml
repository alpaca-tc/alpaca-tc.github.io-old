<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RailsとRubyとVimのブログ]]></title>
  <link href="http://alpaca.tc/atom.xml" rel="self"/>
  <link href="http://alpaca.tc/"/>
  <updated>2014-05-29T22:43:52+09:00</updated>
  <id>http://alpaca.tc/</id>
  <author>
    <name><![CDATA[alpaca-tc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[クロノスを退社しました！]]></title>
    <link href="http://alpaca.tc/blog/diary/i-just-quit-my-job-at-kronos.html"/>
    <updated>2014-05-24T01:07:00+09:00</updated>
    <id>http://alpaca.tc/blog/diary/i-just-quit-my-job-at-kronos</id>
    <content type="html"><![CDATA[<p>書きたい事</p>

<ul>
<li>ひたすら突き詰めた2ヶ月

<ul>
<li>180時間</li>
<li>Java</li>
<li>pixivで働くため</li>
</ul>
</li>
<li>大阪のエンジニア

<ul>
<li>1年遅れ</li>
</ul>
</li>
<li>凄いコミュニケーション能力

<ul>
<li>ホワイト企業</li>
<li>Ruby中心</li>
</ul>
</li>
</ul>


<p>先週、4月から働いていた株式会社クロノスを退社したので流行の退職エントリを書いてみる。</p>

<p>退職エントリといえば、<a href="http://d.hatena.ne.jp/takeda25/touch/20140407/1396864651">いい話(ウェブリオを辞めました)</a>の記事を読んで大変感銘を受けた。<br/>
同じように、エンジニアとして働く誰かの参考になれば嬉しい:)</p>

<h2>会社について</h2>

<p>クロノスは「面白いことを真面目に取り組むIT企業であり続ける」を企業理念に掲げている東京・新大阪にある会社である。</p>

<p>主な業務としてSler支援・IT教育・受託開発を包括的に行っていて、最近は5ヶ年計画を掲げて事業ドメインを自社開発中心へシフトしようと取り組んでいる。</p>

<p>入社のきっかけは、前に働いていた社長による紹介である。<br/>
<a href="http://alpaca.tc/blog/blog/i-im-join-for-this-company.html">前の記事</a>で書いた通り、僕は大学を辞める決断をした。その際に、先は分からないけれど取り敢えずの勤め先として社長がクロノスを紹介してくださった。</p>

<p>幸いにも僕のスキルを貢献出来る受託案件があったため、二言返事で働かせてもらえることになった。<br/>
しかし、入れ違いで就職先が決まり、残念ながら2ヶ月だけしか在籍することが出来なかったのが心残りである。</p>

<h2>クロノスの特徴</h2>

<p>今まで僕はWeb系の会社でしか働いたことが無かったので、驚くほど刺激的な時間を過ごすことができた！</p>

<p>僕の直接の業務はとある医療系(？)Webアプリの開発で、マネジメントの高山さんと僕の2人で行なった。</p>

<p>正直なところ、期間も短く業務も一部だったため他の事業ドメインの事情は疎い。<br/>
そのため情報はとても偏るけれど、目に映った事柄については率直な感想を書いていきたい。</p>

<h3>悪かった点</h3>

<p>良かった点があまりに多かったため、先に悪かった点をざっと書いておく。</p>

<h4>1. Slerの文化がやや浸透している</h4>

<p>いわゆるエクセルを中心としたタスク管理、バグ管理はWeb系で活動してきた僕にとって初めての体験だった。<br/>
正直なところ、僕はこういったマネジメントが馴染めなかった:(</p>

<p>とはいえかなり融通してもらえたので大した問題では無かった。</p>

<h4>2. Web技術の浸透度</h4>

<p>もともとJavaを中心にしていたため、Web系技術の情報がまだ浸透しきっていないと感じた。<br/>
現在はRuby/JS中心へ移行しつつあるので、これから浸透していくと思う。</p>

<h3>良かった点</h3>

<p>クロノスで働いてみて、何度も感嘆した。。<br/>
良かった点が日常に溢れていて書ききれない。</p>

<h4>1. 人間力が高すぎる</h4>

<p>「エンジニア」としてだけではなく、ただひたすらに「人」として尊敬出来る会社だった！</p>

<p>謙虚さや人の良さというのは、身に付けようとしてどうこうなるものではない。ましてや、会社としてそういった文化を根付かせようと思ったら尚更である。<br/>
前向きな言葉に溢れて、常に人を気遣って笑顔で仕事に取り組んでいた。</p>

<p>努力や技術とは別のベクトルにある要素である分、かけがえの無い感動があった。<br/>
将来、仕事を依頼することになったら間違いなくクロノスにお願いするだろう。理由は言わずもがな、である。</p>

<p>うーん、もっとあの感動を書き表せる文才が欲しい。笑</p>

<h4>2. ホワイトなIT企業</h4>

<p>とーってもホワイトな環境だった。<br/>
残業はほとんど無いし、同僚は楽しい人ばかり。最高！</p>

<h4>3. 技術的な向上心</h4>

<p>クロノスには技術本の著者が何人もいる。(一定年齢以上はほとんど？)<br/>
会社としても、本の執筆や資格取得を推奨しているので、その気があればかなりサポートしてもらえる。</p>

<h4>4. 教育体制</h4>

<p>IT教育を事業ドメインのひとつとして捉えているだけあって、教育環境が素晴らしかった。<br/>
目の前で新卒の方々がメキメキ上達していく様を見て、かなり焦りを覚えるほどだった。</p>

<p>クロノスは元々エンジニアでなくても、育ててくれる会社なので文系からエンジニアを志望する人にはとてもオススメです。<br/>
何より、「教育体制」なんて垣根は関係なく全ての先輩が親身になってくれる会社ですし。</p>

<h2>まとめ</h2>

<p>２ヶ月という短い間でしたが、最高な時間を過ごせました:)<br/>
クロノスという会社はとても良い会社なので、興味があればぜひ転職してみてくださいw</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsの補助プラグインを書いた]]></title>
    <link href="http://alpaca.tc/blog/vim/alpaca-rails-support.html"/>
    <updated>2014-04-30T00:46:00+09:00</updated>
    <id>http://alpaca.tc/blog/vim/alpaca-rails-support</id>
    <content type="html"><![CDATA[<h1>もうLocaleファイルに迷わない！</h1>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/alpaca-rails-support/screen_shot_1.png" title="screen_shot_1" ></p>

<p>休日を利用して、久しぶりにRails関連のVimScriptを書いたよ:)</p>

<!-- more -->


<h2>Railsとlocalesファイル</h2>

<p>きっかけは、とあるプロジェクトに立てられたIssueであった。</p>

<blockquote><p><strong>言語ファイルが大きすぎてどこを編集しているのか全く分からなくなる。</strong><br/>
<strong>もはや人が書くようなファイルじゃない。</strong></p>

<p>便利なエディタがあるならエディタに頼ってもいいけどざっと探した感じ見つけられなかったので、いい解決方法があれば教えて欲しいです。</p></blockquote>

<p>おっしゃる通り、懸念すべき事項である。<br/>
多国籍に対応したプロジェクトをRailsで作った経験があると分かるが、気をつけていても<strong>localesはカオス</strong>になってしまう。</p>

<p>しかし、次の発言で少し様相が変わる。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/alpaca-rails-support/screen_shot_3.png" title="issue" ></p>

<p><strong>SublimeText2が有力&hellip;だと？</strong></p>

<p><del>何を寝ぼけたこt</del></p>

<p>alpaca-tcはVimの人である。Vimで解決しんぜよう。</p>

<h2>Railsの補助プラグイン</h2>

<p>丁度、僕も今Railsで開発をしている。<br/>
痒いところが幾つかあったので、休日に孫の手を作ることにした。</p>

<p><strong><a href="https://github.com/alpaca-tc/alpaca_rails_support">Alpaca Rails Support</a></strong></p>

<p>といっても、時間があまり無かったので<strong>3つの簡素な機能</strong>でまとめた。</p>

<h3>I18nの探索</h3>

<p>本題の機能である「localesの編集をサポートする」プラグインである。<br/>
キーを探索して、Uniteにぶち込んでくれる。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/alpaca-rails-support/screen_shot_4.png" title="Find_local" ></p>

<p>探索は少し荒いので、Yamlをキレイに書いていなければ動かない。</p>

<h3>Routesの補完</h3>

<p>個人的に一番欲しかった機能である<br/>
たかだかRoutesのスペルミスで、BetterErrorsと挨拶したくない。</p>

<p><img class="image_on_frame center" src="https://raw.githubusercontent.com/alpaca-tc/alpaca_rails_support/master/assets/routes_completion.png" title="reoute補完" ></p>

<p>ようやく<code>rake routes | grep ...</code>の地獄から解放されるヾ(*´∀｀*)ﾉ</p>

<h3>I18nのプレビュー</h3>

<p>特に必要は無かったけれど、思いついてしまったので作った。</p>

<p><img class="image_on_frame center" src="https://raw.githubusercontent.com/alpaca-tc/alpaca_rails_support/master/assets/preview_locales.gif" title="preview" ></p>

<p><strong>( ﾟ∀ﾟ)o彡ﾟギミックかっけー！</strong></p>

<p>vim-easy-motionやvim-overと同じ方法を取り入れていて<br/>
<code>while 1</code>と<code>getchar()</code>の組み合わせでkeypressを補足している。</p>

<p>新鮮な方法だったので、一番気に入っている。</p>

<h2>今後</h2>

<p>もう少ししたら、オンラインのlocales探索アルゴリズムを実装しようと思っている。<br/>
VimScriptでアルゴリズムらしい手法を使ったことは無いので、楽しみである。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[めまぐるしい１年！]]></title>
    <link href="http://alpaca.tc/blog/blog/i-im-join-for-this-company.html"/>
    <updated>2014-04-19T02:37:00+09:00</updated>
    <id>http://alpaca.tc/blog/blog/i-im-join-for-this-company</id>
    <content type="html"><![CDATA[<h1>退学した！</h1>

<p>昨年の6月、<strong>1年8ヶ月働いていたベンチャー企業を辞めて</strong>、大学に復帰した。</p>

<p>その傍ら、大学と平行して<strong>2社の会社を渡り歩いた。</strong></p>

<p>ふと気付けば冬になり、世間は<strong>就職活動一色</strong>に染まっていたので、思い立って<strong>就職活動を始めるも</strong>、挫折(?)して<strong>1ヶ月休む。</strong></p>

<p>かたや、更に新しい会社で働き始めたかと思えば4月となり、<strong>僕は大学を中退</strong>していた。</p>

<p>めまぐるしい！</p>

<p>今日は簡単に、中退の報告と振り返りをしたい。</p>

<!-- more -->


<h2>ベンチャー地獄</h2>

<p>僕は2回生の後期から大阪の会社で、エンジニアとして働き始めた。</p>

<p>さすがに、立ち上げ時期というのもあって<strong>ブラック企業の贅の極みだった</strong>けれど、めちゃくちゃ楽しかった。2年連続で<strong>クリスマスを伊青さんと社畜した</strong>のは、哀し良い思い出である。笑</p>

<p>それから1年8ヶ月働いて昨年退社した。</p>

<p>あの頃は、とにかく<strong>絶望的に刺激的な毎日</strong>で、同僚の方達の考え方は<strong>鋭く僕の仕事観・人生観に影響を与えた</strong>。退社してから、随分と働き方が変わったのでぜひ今一度一緒に働きたいところである。もう、二度と無茶な働き方は出来ないと思うけれど。</p>

<p>会社の方達には、本当に感謝をしている。</p>

<p>怒濤の日々を終えてふと大学に戻ると、大学生の若さが眩しくて、随分と老いを感じた。笑</p>

<h2>就職活動</h2>

<p>大学に戻ってからもせっせと働いていたら、いつの間にか就職活動シーズンに入っていた。</p>

<p>僕も思い立って就活を始めようと思ったけれど、リクナビを見た瞬間に<strong>就職活動を諦めた</strong>。</p>

<p>あの体裁には、本当に吐き気がした。</p>

<p>僕は自分の時間の浪費も、人の時間を奪う行為も、同じく悪だと思っている。リクナビのように、ポチポチと平気で<strong>時間を奪いあう</strong>なんてことは、到底やる気になれなかった。</p>

<p>結局、別の方法で就活するも時間の奪い合いは止められなかった。そして、僕は2月まるまる就活を辞める&hellip;。(つ∀-)</p>

<p><strong>エンジニア志望が毎日コードを書けないなんて、おかしいと思わない？</strong></p>

<h2>決断のとき</h2>

<p>この時期に、問題にぶち当たる。学校に残ることは、<strong>就職のために時間を浪費する</strong>ということに気付いた。というより、確信に変わったというか。</p>

<p>しかし、大学を辞めれば将来は厳しいのだろう。</p>

<h3>信念みたいなもの</h3>

<p>人生はしょっちゅう選択を迫ってくる。けれど、僕は一貫して<strong>シンプルに選ぶことにしている。</strong></p>

<blockquote><p>危険だ、という道は必ず、自分の行きたい道なのだ</p>

<p>怖かったら怖いほど、逆にそこに飛び込むんだ</p></blockquote>

<p>岡本太郎を初めて知ったのは、もう10年ほど前のことだ。</p>

<p>選択を迫られる度に、彼のこの言葉がぐんと盛上がってきて、つき動かされてきた。一度飲み込んでしまえば、これほど強力なおまじないはない。</p>

<p>やりたくないこと、反対されること、厳しいことを選んできたら、ベンチャー社畜を止められなかった。笑 お誘いを断る言い訳が出来ない。</p>

<p>22歳になって、この言葉はますます生命力を帯びている。</p>

<h2>大学を辞める選択</h2>

<p>先日、ついに大学を辞めた。驚くかなぁと思って友人に話したら「ようやくか！」と笑われた。</p>

<p>僕は死ぬまで賢く生きれないだろうなぁと思う。</p>

<h3>これからの話</h3>

<p>さて、6月からpixivという会社で働くことになった。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/i-im-join-for-this-company/pixiv.jpg" title="pixiv" ></p>

<p>イラスト系のSNSを運営する会社で、知っている人は知っている会社かもしれない。</p>

<p>長くなったけれど、これで報告はおしまい！</p>

<p>僕もやっと東京進出するよヽ(・∀・ )ﾉわーい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APIのMockサーバーを構築する「Apiary」を使ってみる]]></title>
    <link href="http://alpaca.tc/blog/web-service/apiary.html"/>
    <updated>2014-04-10T21:36:00+09:00</updated>
    <id>http://alpaca.tc/blog/web-service/apiary</id>
    <content type="html"><![CDATA[<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/apiary/apiary_top.png" title="apiary Build beautiful APIs" ></p>

<p><a href="http://apiary.io/">Apiary</a>は、美しいAPIのドキュメント(Mockサーバー)が作成できるWebサービスです.</p>

<!-- more -->


<h2>Apiaryの使いどころ</h2>

<p>仕事を進める上で、APIの仕様が先に作られることは多々あります.</p>

<p>今関わっている案件でも、APIの仕様表だけ先に届いたので、Mockサーバーを立てて開発を進めることにしました.</p>

<h2>ドキュメント(Mockサーバー)を作ってみる</h2>

<p>Githubの連携でアカウントを作り、すぐにドキュメントの作成に取りかかれます.
markdown(の拡張)でAPIの仕様を書けば、すぐにドキュメントが生成されます.</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/apiary/apiary_document.png" title="Apiary Document" ></p>

<p><strong>う、美しい&hellip;</strong></p>

<p>その上、Apiaryではドキュメントと同時に、そのドキュメントからMockサーバーを立ててくれます.</p>

<p>今回は、デモとして簡単なアルパカAPIを実装しました.</p>

<ul>
<li><a href="http://docs.alpaca.apiary.io/">生成されたドキュメント</a></li>
</ul>


<p>10分ぐらいで作成完了.すばらしい！</p>

<h2>レスポンスを見てみる</h2>

<p>作成されたAPIのMockサーバーは、<code>API名.apiary-mock.com</code>で見ることができます.</p>

<p>さっそく<code>curl</code>でレスポンスを見てみよう</p>

<p><code>$ curl http://alpaca.apiary-mock.com/hello</code></p>

<p>ヽ(・∀・ )ﾉす&hellip;すげぇ便利！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gemを書くときに知っておきたい3つの事]]></title>
    <link href="http://alpaca.tc/blog/ruby/i-have-almost-finished-implementing-comment-parser.html"/>
    <updated>2014-02-18T20:52:00+09:00</updated>
    <id>http://alpaca.tc/blog/ruby/i-have-almost-finished-implementing-comment-parser</id>
    <content type="html"><![CDATA[<p>先日から書き続けていた<a href="https://github.com/alpaca-tc/comment_extractor">CommentExtractor</a>が、大枠完成しました。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/i-have-almost-finished-implementing-comment-parser/capture.png" title="CommentExtractor" ></p>

<p>さて、今回Gemを書くときに役に立った、便利なTipsを幾つか紹介します！</p>

<!-- more -->


<p>内容はバラバラです。笑</p>

<ol>
<li>READMEに視覚情報を追加する</li>
<li>RubyGemsからGemを削除する</li>
<li>RSpecをキレイに書く</li>
</ol>


<h2>1.READMEに視覚情報を追加する</h2>

<p>READMEには視覚的なバッヂを追加出来ます。Gemを書くときには、ぜひとも入れておきたい情報ですね。</p>

<ul>
<li><a href="http://badge.fury.io/rb/comment_extractor"><img src="https://badge.fury.io/rb/comment_extractor.png" alt="Gem Version" /></a></li>
<li><a href="https://travis-ci.org/alpaca-tc/comment_parser"><img src="https://travis-ci.org/alpaca-tc/comment_extractor.png?branch=v1.0.0" alt="Build Status" /></a></li>
<li><a href="https://coveralls.io/r/alpaca-tc/comment_extractor?branch=v1.0.0"><img src="https://coveralls.io/repos/alpaca-tc/comment_extractor/badge.png?branch=v1.0.0" alt="Coverage Status" /></a></li>
</ul>


<p>もちろん、登録すれば無料で作ることが出来ます。</p>

<p>詳しくは<a href="http://elgalu.github.io/2013/add-achievement-badges-to-your-gem-readme/">コチラの記事</a>を読んでみましょう。</p>

<h2>2.RubyGemsからGemを削除する</h2>

<p>間違えてRubyGemsにPushしてしまった！</p>

<p>そんなときに便利なyankコマンド。意外と知られていない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem yank gem_name -v 1.0.0
</span></code></pre></td></tr></table></div></figure>


<p>ただ、これをやっても論理削除されるだけのようですねぇ。多分。</p>

<p>このバージョン使うなよ！新しいの使えよ！ってときに使うコマンドだと思います。</p>

<h2>3.RSpecをキレイに書く</h2>

<p>RSpecをキレイに書く方法は、ある程度伝統があります。</p>

<ul>
<li><a href="http://betterspecs.org/">BetterSpecs</a></li>
<li><a href="http://bitfluxx.com/2011/05/23/some-rspec-tips-and-best-practices.html">Some RSpec Tips and Best Practices</a></li>
</ul>


<p>今回は、ある程度RSpecを書ける人向けに、検索してもあまり出てこない情報(検索しにくい？)を提供したいと思います。</p>

<h3>Syntaxについて</h3>

<h4>be_truthy, be_falsy</h4>

<p>RSpecが新しくなって、<code>be_true</code>, <code>be_false</code>→<code>be_truthy</code>, <code>be_falsy</code>となりました。
今までは、厳密に<code>true</code>で無くてもテストが通っちゃいましたからね。</p>

<h4>現在の主題であるクラスを取得する</h4>

<p>RSpecでは<code>described_class</code>というメソッドを使用出来ます。
<code>describe KlassName do...</code>で指定したKlassNameが格納されます。</p>

<p>これを使えば、クラス名に依存せずにテストを書く事ができますね。</p>

<h4>ExampleGroupを作る</h4>

<p>ご存知の通り、Railsのテストではcontroller, model, viewで使えるメソッドが大きく異なります。
それは、RSpecのexample_groupという機能を使って、テストの種類を元にModuleをincludeしているからです。</p>

<p>これを使えば、複数のファイルで共通する内容を簡単に記述する事が出来ます。
次のような感じですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec_helper.rb</span>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">ExampleGroupModuleName</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:optional</span><span class="p">,</span> <span class="n">example_group</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">file_path</span><span class="p">:</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sx">%w[spec comment_extractor extractor .*.rb]</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;[\\\/]&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">add_setting</span> <span class="ss">:source_code_path</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="s1">&#39;spec/assets/source_code&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">ExampleGroupModuleName</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">source_code_path</span><span class="p">(</span><span class="n">file_name</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dir</span> <span class="o">=</span> <span class="no">RSpec</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">source_code_path</span>
</span><span class='line'>    <span class="n">file_name</span> <span class="p">?</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">:</span> <span class="n">dir</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>    <span class="n">k</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:instance</span><span class="p">)</span> <span class="p">{</span> <span class="n">described_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">source_code</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:source_code</span><span class="p">)</span> <span class="p">{</span> <span class="n">source_code_path</span><span class="p">(</span><span class="n">file_name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">describe</span> <span class="s1">&#39;.new&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">subject</span> <span class="p">{</span> <span class="n">instance</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">let</span><span class="p">(</span><span class="ss">:file_name</span><span class="p">)</span> <span class="p">{</span> <span class="s1">&#39;filename.rb&#39;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span> <span class="p">{</span> <span class="n">subject</span> <span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを使えば、まとまったテストをスッキリ書く事ができますね。</p>

<h2>まとめ</h2>

<p>ざっくばらんに書きました。
Gemを作るのは簡単なので、みなさんも作ってみてください！</p>

<p>では！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ここまで出来る！RubyのSplat Operatorまとめ]]></title>
    <link href="http://alpaca.tc/blog/ruby/how-to-use-star.html"/>
    <updated>2014-02-12T04:16:00+09:00</updated>
    <id>http://alpaca.tc/blog/ruby/how-to-use-star</id>
    <content type="html"><![CDATA[<p>Splat Operatorとは、<code>*</code>のことです</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/how-to-use-star/capture.png" title="SplatOperator" ></p>

<p>この前、友人にコードレビューしてもらっていたら</p>

<p>「え、Rubyってこんな書き方出来るんですか？」と言われて、「知らない人もいるんだなぁ」と思ったので簡単なまとめ</p>

<!-- more -->


<h1>Splat Operatorの色んな使い方</h1>

<p>Splat Operatorは、応用の幅が広いです。</p>

<p>結構当たり前だと思っていましたが、コード読書しないと見る機会は少ないかも。</p>

<h2>1-1. 配列に変換する</h2>

<p>まずは基本編。配列に変換してやりましょう</p>

<p>文字列やsymbolは<code>.to_a</code>が無いですが、<code>*</code>を使えばどの変数でも配列に出来ちゃいます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="o">*</span><span class="s2">&quot;string&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">string</span> <span class="c1">#=&gt; [&quot;string&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">symbol</span> <span class="o">=</span> <span class="o">*</span><span class="ss">:symbol</span>
</span><span class='line'><span class="nb">p</span> <span class="n">symbol</span> <span class="c1">#=&gt; [:symbol]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="o">*</span><span class="p">{</span> <span class="nb">hash</span><span class="p">:</span> <span class="kp">nil</span> <span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span> <span class="c1">#=&gt; [[:hash, nil]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">range</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">range</span> <span class="c1">#=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>1-2. 親クラスの引数を気にしない</h2>

<p>またまた基本編。<code>*</code>を引数に指定してやれば、親クラスの引数は知らなくても大丈夫。</p>

<p><code>*</code>だけで出来ることを知らない人はいるかも。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Super</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>1-3. 間の引数をまとめる</h2>

<p>引数の最後にSplat Operatorを使うことはよくありますが、間はなかなか見ないですね。</p>

<p>blockで引数を取るときに、間の引数をまとめる事が出来ます。</p>

<p>メソッドやProc,lambdaでも同様の動作です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="o">[[</span><span class="ss">:first</span><span class="p">,</span> <span class="ss">:second</span><span class="p">,</span> <span class="ss">:third</span><span class="p">,</span> <span class="ss">:fourth</span><span class="p">,</span> <span class="ss">:fifth</span><span class="o">]]</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">first</span><span class="p">,</span> <span class="o">*</span><span class="n">mid</span><span class="p">,</span> <span class="n">last</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">first</span>  <span class="c1">#=&gt; :first</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">mid</span>    <span class="c1">#=&gt; [:second, :third, :fourth]</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">last</span>   <span class="c1">#=&gt; :fifth</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># もちろん、こんなことも出来ます</span>
</span><span class='line'><span class="n">first</span><span class="p">,</span> <span class="o">*</span><span class="n">other</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">other</span> <span class="c1">#=&gt; [2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>1-4. <code>**</code>を使う</h2>

<p>キーワード引数って、まだあまり普及してないですね。互換性が気になるからだろうか？</p>

<p><code>**</code>はキーワード引数を取るときに、余った引数をまとめます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hoge</span><span class="p">(</span><span class="ss">first</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">second</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="o">**</span><span class="n">others</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">others</span> <span class="c1">#=&gt; { third: 3 }</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">hoge</span><span class="p">(</span><span class="ss">first</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">second</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">third</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>多分これはSplat Operatorと呼ばない。</p>

<h2>まとめ</h2>

<p>こんな書き方が出来るSplat Operatorって本当に便利ね！</p>

<p>( ﾟ∀ﾟ)o彡ﾟんぎもぢいい!!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Integer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">upto_with_exception</span><span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="o">**</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="n">exception_array</span> <span class="o">=</span> <span class="o">*</span><span class="n">options</span><span class="o">[</span><span class="ss">:except</span><span class="o">]</span> <span class="c1">#=&gt; nilでも何でもおかまいなし！</span>
</span><span class='line'>    <span class="n">exceptions</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[</span><span class="n">exception_array</span><span class="o">.</span><span class="n">zip</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">to</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">p</span> <span class="n">i</span> <span class="k">unless</span> <span class="n">exceptions</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto_with_exception</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">#=&gt; 1, 2, 3, 4, 5</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto_with_exception</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="ss">except</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">#=&gt; 1, 2, 4, 5</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto_with_exception</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="ss">except</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#=&gt; 1, 4, 5</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto_with_exception</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="ss">except</span><span class="p">:</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span> <span class="c1">#=&gt; 1, 2, 3</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[久しぶりにGemを書いている]]></title>
    <link href="http://alpaca.tc/blog/ruby/create-strip-comment.html"/>
    <updated>2014-02-10T12:33:00+09:00</updated>
    <id>http://alpaca.tc/blog/ruby/create-strip-comment</id>
    <content type="html"><![CDATA[<p>最近、久しぶりにGemを書いてます。</p>

<p>去年から<a href="https://github.com/nhmood/watson-ruby">watson-ruby</a>というinline issue manager貢献してます。</p>

<p>watsonは凄い便利なんですが、コードがかなりアレなのです&hellip;。</p>

<p>「全部リファクタリングさせてくれー！」って言っても、まだやりたい作業があるらしく「ブランチ切るから、もう少し待ってて:)」と言われたっきり&hellip;</p>

<p>うーむ、、なかなか全部は触れないので、とりあえず一番やっかいな部分だけ汎用的にすべく自作しました。</p>

<!-- more -->


<h2>どんなGem?</h2>

<p>あらゆるプログラムソースを読み取って、<strong>コメント行のみを取り出すGem</strong>です。watsonでは、このコメント行を読み取って、todoの管理を行っています。</p>

<p>最近のwatsonのPRを見ても、対応ファイルの追加(正規表現の追記)ばかりなのです。こんなもの、他のGemにくれてしまえ！</p>

<p>どんなファイルタイプであれ、扱うのはコメントという概念なのだから、委譲して抽象化しちゃいましょう。</p>

<h2>何が出来るようになるんだい？</h2>

<p>あらゆるプログラムのソースコードをパースして、コメント行だけを抽象的に扱う事が出来ます。</p>

<p>読み取って、何らかの処理をすることが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 今のところはこんな感じ。</span>
</span><span class='line'><span class="c1"># Gem名やmethod名は変更します</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;strip_comment&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/path/to/file&#39;</span>
</span><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="ss">StripComment</span><span class="p">:</span><span class="ss">:FileObject</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span> <span class="o">=</span> <span class="ss">StripComment</span><span class="p">:</span><span class="ss">:Parser</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">scan</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">comments</span> <span class="c1"># =&gt; [StripComment::CodeObject::Comment, ...]</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単に思いつく限りの用途はこんな感じ。</p>

<ul>
<li>英語のコメントの文法チェック / 翻訳</li>
<li><code>[review - @alpaca-tc ここ見ておいて！]</code>というコメントにGit post-hookをかけて、ダイレクトメッセージを送る</li>
<li>iftttとの連携</li>
</ul>


<p>他にも色々出来そうですね。</p>

<h2>Vimでテスト</h2>

<p>さっそくVimと連携してみました。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/create-strip-comment/comment.gif" title="comment.vimデモ" ></p>

<p>コメント行を取り出して、Gingerで文法チェックしています。</p>

<h2>まとめ</h2>

<p>あとは対応ファイルを増やして、リファクタリングしたら完成です。
今<code>StripComment</code>という名前なんだけど、絶対違うよね。(´・ω・｀)良い名前が思いつかない</p>

<p>終わったら誰か、コードレビューして欲しいなぁ！ヽ(・∀・ )ﾉわーい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆就活へ参加するときのノウハウまとめ 続き]]></title>
    <link href="http://alpaca.tc/blog/diary/gyaku-syuukatsu-2.html"/>
    <updated>2014-01-20T16:28:00+09:00</updated>
    <id>http://alpaca.tc/blog/diary/gyaku-syuukatsu-2</id>
    <content type="html"><![CDATA[<h1>再び逆就活に参加してきました！</h1>

<p>逆就活へ初めて参加される方は、前の記事から見ると良いと思います。-> <a href="http://alpaca.tc/blog/diary/gyaku-syuukatsu-1">逆就活へ参加するときのノウハウまとめ</a></p>

<p>1/18(土)に参加した<a href="http://www.studenthunting.com/">ITエンジニア逆求人</a>についての報告です:)</p>

<!-- more -->


<h2>逆就活へリベンジ</h2>

<p><a href="http://alpaca.tc/blog/diary/gyaku-syuukatsu-1">前回の失敗</a>を活かして、<strong>「イベントに参加するメリットを最大化する」ための解決策</strong>を実践して来ました。</p>

<blockquote><p>ということで、次回参加する際には3社ぐらいからしか面談希望が来ないぐらいになれば合格かなぁ、と思います。</p></blockquote>

<p>こんなことを言っていたのですが、結果は如何に。</p>

<h2>試したことと、その結果</h2>

<blockquote><p>捨てること、そして集中すること。</p></blockquote>

<p>双方のために、不要なものは捨てて、重要なことに集中することが大事かと。</p>

<p><strong>相手の時間を無駄にすることも、自分の時間を無駄にすることも悪だと思います。</strong></p>

<p>さて、前回と今回の結果を比べるため、Gvalueという数値を挙げます。これは、イベント後に企業から送られてくる評価シートで、面談した企業からの評価が全て分かります。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/gyaku-syuukatsu-2/gvalue.jpg" title="G-valueの比較" ></p>

<h3>1. 名刺交換の段階で、合わない企業さんは断る</h3>

<p><strong>当日に会わない企業を決める</strong></p>

<p>逆就活では、当日のイベントの前に企業の一覧が送られてきます。今回は、28社が登録されていました。</p>

<p>まず、その一覧をターゲット, 中ターゲット(判断出来ない), 捨てるターゲットに選びました。</p>

<p>僕は次の順番で優先順位を決めました。</p>

<ol>
<li>捨てるターゲット(合わない企業)を消す</li>
<li>ターゲット(合うと思う企業)をリストアップする</li>
<li>残った企業について、中 or 捨てるターゲットに振り分ける</li>
</ol>


<p>残りを振り分ける方法としては、有価証券報告書、取締役の人の書いた本、<a href="http://jobtalk.jp/">転職会議</a>の情報を横断的に見て、自分と合うか考えると良いと思います。</p>

<p>最終的に、ターゲットを3社に絞ります。今回は、捨てるターゲットに選んだ企業さんは名刺交換会の段階で断りました。</p>

<p><strong>結果</strong></p>

<ul>
<li>志向の近い企業が面談に集まった</li>
<li>捨てるターゲットに選んでいた企業は1社のみ面談</li>
<li>重要な成果をあげる時間(ターゲット企業との面談)に集中できた</li>
</ul>


<h3>2. 名刺交換の際に、MBAで録画する</h3>

<blockquote><p>入れ替わり立ち代わりで、10~20人を覚えるのは無理です。笑
なので、<strong>MacBookAirで録画しながら名刺交換</strong>をします。</p></blockquote>

<p>と言っていましたが、身長差激しくて録画無理www 今回は長身の方が多かったです&hellip;。</p>

<p>よく考えたら、名刺交換しているのにMBAを見ないですしね。何か無意識に目が行くような画像を表示させておくと、良いと思います！</p>

<h3>3. プロフィールはターゲットに向けて作る</h3>

<p>続いて、ターゲット各社の採用情報サイトを読んで、<strong>求める人材像の共通解</strong>を出しました。</p>

<ul>
<li>主体性を持っている</li>
<li>挑戦者である</li>
<li>チームワークを重んじる</li>
<li>問題解決が楽しい</li>
</ul>


<p>まぁ&hellip;大体どこも同じようなこと書いてあるんです。これらは、元々自分が持っている特性だったので、プロフィールはあまり変更しませんでした。</p>

<p>ただ、採用情報以外にも共通項(志望動機)があると思うので、同時に挙げておくと良いですね。</p>

<h3>3. 面談は重要なことに集中する</h3>

<p>前回の反省であげたフローは次の通りです。</p>

<blockquote><ol>
<li>面談開始のときに、面談の目的をお互いに確認する</li>
<li>その企業が求めている人材を確認する。(プロフィールのどこを見て来たのか、何位に指名したのか)</li>
<li>自分が出来ることと、企業に入ってやりたいことをプレゼンする</li>
<li>企業と雑談する</li>
</ol>
</blockquote>

<p>実際に実践しました！予想通り、<code>1.面談開始のときに、面談の目的をお互いに確認する</code>の段階で目的に齟齬がある企業さんもいました。「なぜ、僕を指名されたのでしょうか&hellip;？」となって、噛み合なかったです。;(</p>

<p>でも、多くの企業さんとは面談開始の時点で、互いの目的を確認し合える面談になったと思います。</p>

<p><strong>結果</strong></p>

<ul>
<li>ターゲットの会社からのGvalueが全て<strong>満点</strong>(!!)</li>
<li>ターゲット以外の企業からの「面接態度」のGvalueが悪くなった</li>
<li>捨てるターゲットを除いたプレゼンのGvalueが、3.67(前回) &ndash;> 4.8</li>
</ul>


<p>あと、捨てるターゲットに選んでいた企業とのマッチ度が最低だったので、この方法は合っていると確信しました。</p>

<h2>まとめ</h2>

<p><strong>「捨てて良かったー！」</strong>の一言に尽きますね。ばっちり成果を出せたと思います。</p>

<p>自分と合う企業との面談のためだけに全てを集中したので、前回よりエッジの効いた思考になれたと思います。きっと、就活ってこういったマッチングをするものなのかなと思いました。</p>

<p>そして、<strong>疲れない</strong>ということに驚き。もちろん、肉体疲労はありますが、前回の倍のターム数をこなしたにも関わらず精神疲労はありませんでした。</p>

<p>引き続き、選考を楽しみたいと思いますー。</p>

<h3>おまけ1: 資料</h3>

<p>もうきっとIT逆求人に参加しなさそうなので、公開しても問題無い&hellip;よね？今の選考が全て落ちるか、留年したら再度応募しますが:p</p>

<ul>
<li><a href="http://alpaca.tc/images/blog/gyaku-syuukatsu-2/gvalue1223.png">Gvalue 12/23</a></li>
<li><a href="http://alpaca.tc/images/blog/gyaku-syuukatsu-2/gvalue0120.png">Gvalue 01/18</a></li>
<li><a href="http://alpaca.tc/images/blog/gyaku-syuukatsu-2/presen20140118.pdf">プレゼン(PW:僕のTwitterID)</a></li>
</ul>


<h3>おまけ2: Gstylusさんへ</h3>

<p>お世話になりました！僕のようなはみ出しものには、救いのあるイベントでしたw いつも僕たちのために夜遅くまでお仕事してくださっているおかげで、実のある体験が出来ました。</p>

<p>お話は変わりますが、システム・Webサービス周りでお困りでは無いですか？ 夜遅くまでお仕事されていますし、多少であれば自動化のお手伝い出来るかもしれません！</p>

<p>2週間程度で実装できる機能がありましたら、お手伝いしますので連絡くださいー:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年にやりたい14のこと]]></title>
    <link href="http://alpaca.tc/blog/diary/somethings-that-i-want-to-do.html"/>
    <updated>2014-01-14T00:05:00+09:00</updated>
    <id>http://alpaca.tc/blog/diary/somethings-that-i-want-to-do</id>
    <content type="html"><![CDATA[<p>Takumi Kaiさんの<a href="http://nature-dot.com/othres/9">2014年にやりたい27のこと</a>を読んで、こういうのを記事にするのも良いなぁと思った。</p>

<blockquote><p>思考は現実になる</p></blockquote>

<p>この言葉は僕も好きだし、新しくやることを考えるのは楽しいんだよ！</p>

<p>今年やることのリストを考えてみた:)</p>

<!-- more -->


<h2>一人でやることリスト</h2>

<h3>1. 海外に行く</h3>

<p>海外の美術館に凄い興味あります</p>

<h3>2. 美術館に行く</h3>

<p>今年は特に、予約が必要な個人のアトリエとか行きたいなー！</p>

<h3>3. 東京まで散歩する</h3>

<p>散歩が趣味です</p>

<p>東京まで7日かからないみたいなので、就活がてら歩くよー:)</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/somethings-that-i-want-to-do/IMG_0118.jpg" width="200" title="東京から滋賀まで歩く" ></p>

<h3>4. 岡本太郎の本を3冊読む(完)</h3>

<p>中学生のころからたまらなく好き。</p>

<p>20代の決意を新たにするために、読まないといけない！</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/somethings-that-i-want-to-do/pic_okamoto.jpg" title="岡本太郎の本" ></p>

<h3>5. 今年も1,000時間以上プログラミングする</h3>

<p>今のところの累計は8,500時間ぐらい。就活早く終われー</p>

<h3>7. Vim Version3を読み切る</h3>

<p>別の言語でVimを再実装する試み。もっとVimを愛さなければ&hellip;。</p>

<h2>人とやる事</h2>

<h3>7. アルパカのはんこを掘る</h3>

<p>祖父がはんこ職人で、僕も家に帰ったら彫刻刀で掘ってます。</p>

<p>文字しか掘らないけれど、せっかくだしイラストのハンコ掘ってみたいなァ</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/somethings-that-i-want-to-do/pic_hanko.jpg" width="200" title="判子を掘る" ></p>

<h3>8. 前職でお世話になった人に会う(完)</h3>

<p>ドリラボ時代の先輩方に会いたい！</p>

<p>尊敬している杉さんには昨晩会えました(ﾟ∀ﾟ)</p>

<h3>9. 酒蔵に行く</h3>

<p>東京で、酒蔵で働いている<em>まっちゃん</em>という方に日本酒の話を聞いて、感動しました。</p>

<p><em>「この方ぐらい勉強しないと日本酒に失礼だ。」</em></p>

<p>と思ったので、日本酒好きな同年代集めて酒蔵に行くよ。</p>

<h3>10. 金沢の芸術家の一家に会いにいく</h3>

<p>昨年、金沢の喫茶店で美味しいコーヒーを飲んでいたら、色々あって<strong>芸術家の家に泊まることになった。</strong></p>

<p>あれは、人生でトップクラスに楽しい一日だった。</p>

<p>一宿一飯の恩があるので、今年中にお礼に行きたい！</p>

<h2>仕事とかやりたいこと</h2>

<p>長々と書いてきたので、少しはしょります。</p>

<ul>
<li>11.自分のブログ500uu/day アクセス</li>
<li>12.自分のポートフォリオサイトを作る(完)</li>
<li>13.仕事の事業を軌道に乗せる</li>
<li>14.意思決定・事業計画の知識を学ぶ</li>
</ul>


<h2>人生について考える</h2>

<p>2014年にやること・やりたいことを考えるのは楽しいなぁー。</p>

<p>こうやって考えていて思ったけれど、仕事を始めてから「大学で何かしたい」という考えがさっぱり無くなった。</p>

<p>関西学生エンジニアの猛者たちは、思いっきりが良くて凄い。自分は、常識を捨てられないのか、度胸が無いのか、あるいは大学を卒業するのが正しいのか。。</p>

<p>本当は、大学なんてすぐにやめて、またしっかり働きたいよ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[neocomplete.vimのfile_includeを使いこなす]]></title>
    <link href="http://alpaca.tc/blog/vim/file-include-by-neocomplete.html"/>
    <updated>2014-01-11T13:25:00+09:00</updated>
    <id>http://alpaca.tc/blog/vim/file-include-by-neocomplete</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://atnd.org/events/45072">Vim Advent Calendar 2013</a>の42日目の記事になります。</p>

<h1>Neocomplete.vimのfile_includeを使いこなす</h1>

<p>さて、今回の記事ではneocompleteのfile_includeを使いこなしてみます。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/file-include-by-neocomplete/completion_capture.png" title="neocomplete_file_include" ></p>

<!-- more -->


<p>file_includeとは、ファイルパスを補完してくれるアレです。file補完との違いは、特定のキーワードや変換を含んだ補完が出来る点です。</p>

<ol>
<li>キーワード(<code>require</code>や<code>#include</code>)があると補完が始まり</li>
<li>指定されたパスの中から候補を探し、変換して表示します。(例:<code>system.os</code>)</li>
</ol>


<p>内部では、path, include, includeexprなどが使われています。(pathの参考 &ndash;> <a href="http://alpaca.tc/blog/vim/jump-to-gem-path.html">Vim中級者を脱する Path編</a>)</p>

<h2>neocompleteを拡張する</h2>

<p>file_includeを拡張する際には、neocompleteの設定をしてあげる必要があります。それぞれ、次のように5つ変数をファイルタイプ毎に設定します。</p>

<p>指定しなければ、デフォルトの部分の変数が使用されます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Liquidで画像pathを補完する</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; デフォルト &amp;l:path(検索対象のディレクトリ`,`区切り)</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#sources#<span class="nb">include</span>#paths.liquid <span class="p">=</span>
</span><span class='line'>  \ <span class="s1">&#39;/Users/alpaca-tc/projects/alpaca-tc.github.io/source&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; デフォルト &amp;l:include(正規表現にマッチしたら補完を開始)</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#sources#<span class="nb">include</span>#patterns.liquid <span class="p">=</span>
</span><span class='line'>  \ <span class="s1">&#39;\({\s*%\(\s\+\w\+\)\+\(\s*\|\s\+[a-zA-Z0-9_#\?\!]\+\)\@=\|{\s*{\(\s\+\w\+\)\+\(\s*\|\s\+[a-zA-Z0-9_#\?\!]\+\)\@=\)&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; デフォルト &amp;l:includeexpr(ファイルパスを出力する際に変換する)</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#sources#<span class="nb">include</span>#exprs.liquid <span class="p">=</span>
</span><span class='line'>  \ <span class="s1">&#39;substitute(v:fname, &quot;^/&quot;, &quot;&quot;, &quot;&quot;)&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; デフォルト &#39;.&#39;(区切り文字の指定)</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#sources#file_include#delimiters.liquid <span class="p">=</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; デフォルト [](補完するファイル拡張子フィルター)</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#sources#file_include#exts.liquid <span class="p">=</span>
</span><span class='line'>  \ [<span class="s1">&#39;png&#39;</span><span class="p">,</span> <span class="s1">&#39;jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;gif&#39;</span><span class="p">,</span> <span class="s1">&#39;jpeg&#39;</span><span class="p">,</span> <span class="s1">&#39;ico&#39;</span>]
</span></code></pre></td></tr></table></div></figure>


<h2>解説いる？</h2>

<p>先ほどのコードを読めば、だいたい分かると思います。(あなたがVimmerなら！)</p>

<p>もし、マイナーな言語でfile_include補完があった方が便利ならば、拡張してみてくださいー。</p>

<p>あるいは、&amp;l:include, &amp;l:includeexprなどで対応出来ているかもしれませんが。neocomplete.vim自体に設定が少ないのはそういうことです、(よね&hellip;？)</p>

<p>個人的には、フレームワーク毎にfile_includeが使いたい所存です。</p>

<h2>Railsのimage_pathを補完してみる</h2>

<p>最後です。</p>

<p>Railsでimage_pathを入力する際に、typoが多いので補完で対応してみます。</p>

<p>こんな感じで色々対応出来るはずなので、誰か本格的なRails用カスタマイズを作ってみてくれたらうれしいです！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Rails.vimが必須</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:setup_include_file_for_rails<span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">!</span>exists<span class="p">(</span><span class="s1">&#39;b:rails_root&#39;</span><span class="p">)</span> <span class="p">||</span> <span class="p">!</span>exists<span class="p">(</span><span class="s1">&#39;g:neocomplete#sources#include#paths&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:neocomplete#sources#<span class="nb">include</span>#patterns.haml <span class="p">=</span>
</span><span class='line'>        \ <span class="s1">&#39;^\s*\&lt;\%(image_path\|image_tag\)\&gt;&#39;</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:neocomplete#sources#<span class="nb">include</span>#paths.haml <span class="p">=</span>
</span><span class='line'>        \ <span class="k">b</span>:rails_root . <span class="s1">&#39;/app/assets/images&#39;</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:neocomplete#sources#<span class="nb">include</span>#exprs.haml <span class="p">=</span>
</span><span class='line'>        \ <span class="s2">&quot;substitute(substitute(v:fname,&#39;::&#39;,&#39;/&#39;,&#39;g&#39;),&#39;$&#39;,&#39;&#39;,&#39;&#39;)&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:neocomplete#sources#file_include#exts.haml <span class="p">=</span>
</span><span class='line'>        \ [<span class="s1">&#39;png&#39;</span><span class="p">,</span> <span class="s1">&#39;jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;gif&#39;</span><span class="p">,</span> <span class="s1">&#39;jpeg&#39;</span><span class="p">,</span> <span class="s1">&#39;ico&#39;</span>]
</span><span class='line'>  <span class="k">let</span> <span class="k">g</span>:neocomplete#sources#file_include#delimiters.haml <span class="p">=</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>command<span class="p">!</span> RailsView <span class="k">call</span> <span class="k">s</span>:setup_include_file_for_rails<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>うっほい！</strong></p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/file-include-by-neocomplete/completion_for_rails_view.png" title="completion_for_rails_view" ></p>

<p>Shougoさんいつもありがとうございます。本当に。</p>

<p>ちなみに、tpopeさんはこんな感じの事を剛腕で捩じ伏せて実現しています。Vimガチ勢怖い&hellip;。</p>

<h2>Vim Advent Calendar 45</h2>

<p>前日は@osyo_mangaさんの<a href="http://d.hatena.ne.jp/osyo-manga/20140110/1389342122">textobj の両端へ移動する operator つくった</a>でした。</p>

<p>は！またosyoさんということは&hellip;!? と思っていたら、やはりVim Advent Calendarの今後の投稿者が居ませんでした;(</p>

<p>このブログを見ているあなた！(特にここまで読み切ったVim狂)</p>

<p>どうせVimmerしか居ない事は分かっています。<strong>ぜひ書いてください</strong> &ndash;> <a href="https://twitter.com/manga_osyo">osyoさん</a>に「記事書きたいですー」とリプライ飛ばしましょうー！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カヤックのお年玉企画「お好き玉」の解説]]></title>
    <link href="http://alpaca.tc/blog/web-service/kayac-2014-otoshidama-2.html"/>
    <updated>2014-01-07T00:07:00+09:00</updated>
    <id>http://alpaca.tc/blog/web-service/kayac-2014-otoshidama-2</id>
    <content type="html"><![CDATA[<p><a href="http://alpaca.tc/blog/web-service/kayac-2014-otoshidama.html">先日紹介した「お好き玉」</a>ですが、アクセス数が多いはずなのにまだ2014に達していません！</p>

<p>アクセスが足りないのか、みんな諦めるのか分かりませんが<strong>2014を超したほうが楽しい</strong>ので、少しだけヒント載せておきます！</p>

<p>素人でも、これをきっかけに少しだけWebエンジニアっぽいことに挑戦できたら楽しいよね:)</p>

<!-- more -->


<h2>逃げる「イイネ!!」が押せない仕組み</h2>

<p>このFBイイネが押せない理由は2つあります。</p>

<ol>
<li>イイネボタンの上にCSSでマスクがかかっている</li>
<li>カーソルに合わせてボタンが動く</li>
</ol>


<p>この両方を解除しないとボタンは押せません。</p>

<p><a href="https://www.google.com/intl/en/chrome/browser/">Google Chrome</a>の<a href="http://www.buildinsider.net/web/chromedevtools/01">Developer Tool</a>は必須ですヨ:)</p>

<h3>1.イイネボタンの上にCSSでマスクがかかっている</h3>

<p>z-indexの仕業かと思ったら、こんな方法もあるんですねぇ。感心。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">http</span><span class="o">://</span><span class="nt">iine2014</span><span class="nc">.fnobi.com</span><span class="o">/</span><span class="nt">css</span><span class="o">/</span><span class="nt">iine2014</span><span class="nc">.css</span><span class="nd">:84</span>
</span><span class='line'><span class="nf">#iine</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">120px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">22px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Facebookのイイネボタンのidが<code>#iine</code>で、その直後に疑似要素<code>:after</code>が同じサイズでかぶさっています。なので、どんなに頑張ってもボタンは押せません。</p>

<p>この疑似要素を消すか、widthを0にしてしまえばボタンは押せますね。Developer Toolの出番やで！</p>

<h2>2. カーソルに合わせてボタンが動く</h2>

<p>JavaScriptを見てみると、<code>mouseover</code>と<code>touchstart</code>のタイミングで位置を移動させているのが分かります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// http://iine2014.fnobi.com/js/iine2014.js:9130</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">win</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">$window</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">$iine</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#iine&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 略</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$iine</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mouseover touchstart&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// 略</span>
</span><span class='line'>        <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>なので、このeventを解除してやれば動かなくなります(・∀・) <code>on</code>の逆をすればいいのです</p>

<h2>まとめ</h2>

<p>解説しましたが、つまるところ<code>#iine</code>にまつわるものを解除してやればいいので、Developer Toolを開いて、ちょめっとすれば一瞬ですネヾ(*´∀｀*)ﾉ</p>

<p>さぁ<a href="http://iine2014.fnobi.com/">「お好き玉」</a>へ挑戦してみようー！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カヤックのお年玉企画がすげぇ！]]></title>
    <link href="http://alpaca.tc/blog/web-service/kayac-2014-otoshidama.html"/>
    <updated>2014-01-01T18:24:00+09:00</updated>
    <id>http://alpaca.tc/blog/web-service/kayac-2014-otoshidama</id>
    <content type="html"><![CDATA[<h1>2014人まで、「イイネ！」でお金がもらえるよ！</h1>

<p>面白法人カヤックの新年企画だそうです^^</p>

<p>FBの「イイネ！」を押して2014円ゲットしましょう！</p>

<p><a href="http://iine2014.fnobi.com/">お好き玉</a></p>

<p>ちなみに現在519人ぐらいです</p>

<h2>おまけ</h2>

<p>逆就活でカヤックさんからメール来ていました。そういえば、カヤックのVimmerのせいで、僕はVim狂になったんですよね！:p</p>

<p>なんだか面白そうなので社長面談に行ってみたいな！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年に作ったVimプラグイン達]]></title>
    <link href="http://alpaca.tc/blog/vim/vim-plugins-2013.html"/>
    <updated>2013-12-29T22:54:00+09:00</updated>
    <id>http://alpaca.tc/blog/vim/vim-plugins-2013</id>
    <content type="html"><![CDATA[<p>今年も残すところあと僅か！あぁ、Vimにどっぷりの一年でした。</p>

<p><strong>今年書いたプラグインを紹介しまーす！</strong></p>

<!-- more -->


<p>振り返ると、一年で人はここまでVimmerとして成長できるのかと驚くばかりです。(まだまだ未熟者ですが)</p>

<h1>14個のVimプラグイン達</h1>

<p>今年書いたプラグインは14個以上でした。
1年以内の出来事とは思えないぐらい、それぞれが思い出深いですね。。。</p>

<p>外部に発表していなかったプラグインもあるので、余力があれば試してみてください。</p>

<h2><a href="https://github.com/alpaca-tc/alpaca_powertabline">alpaca_powertabline</a></h2>

<p><img class="image_on_frame center" src="https://github-camo.global.ssl.fastly.net/8a63810a39b08548c3ce51a796f589b79d9df4be/687474703a2f2f662e636c2e6c792f6974656d732f31443430317630553355306f336733553054306e2f616c706163615f7461626c696e652e706e67" title="alpaca_powertabline" ></p>

<p>tablineをpowerline化したプラグインです。</p>

<p>初めてのVim Advent Calendarで<a href="http://qiita.com/alpaca_taichou/items/ab70f914a6a577e25d70">powerlineをいつ使う？今でしょ！</a>という記事を書いて、そこそこ人気な記事となり驚きました。</p>

<p>いやぁ&hellip;<em>「今でしょ！」</em>って、もうさぶいねぇ。笑</p>

<p>初対面の人で、「使っているよ！」と言ってもらえることもあって嬉しかったです。</p>

<p>今年はlightlineやvim-airlineが登場したので、statusline系の変化が大きかった年だとと思います。</p>

<h2><a href="https://github.com/alpaca-tc/alpaca_english.git">alpaca_english</a></h2>

<p>SQLiteの英和辞書を利用して、英語の補完をするプラグインです。Uniteを通じて、類義語検索や例文検索を行うこともできます。</p>

<p><img class="image_on_frame center" src="https://github-camo.global.ssl.fastly.net/cb17a71ffad0a656d3a2837fe4c216a50524c2e4/687474703a2f2f636c2e6c792f696d6167652f316c316c306732373249314e2f254533253832254239254533253832254146254533253833254141254533253833254243254533253833254233254533253832254237254533253833254137254533253833253833254533253833253838253230323031332d30342d3231253230382e33372e33392e706e67" title="alpaca_english_demo" ></p>

<p>これを書き始めたときに、勇気を出してlingrで発言しはじめました。+Ruby環境のバグをVim-JP報告したのもこのプラグインがきっかけですね。</p>

<p>右も左も分からず、色んな人に助けてもらいました。ありがたや、ありがたや。</p>

<p>Vimプラグインを書き始めたときなので、哀愁の漂うコードです。あぁ、そろそろリファクタリングしないと！</p>

<h2><a href="https://github.com/alpaca-tc/beautify.vim.git">Beautify.vim</a></h2>

<p>整形・変換を行うプラグインです。糞便利。</p>

<p><img class="image_on_frame center" src="https://github.com/alpaca-tc/beautify.vim/blob/master/assets/02.gif?raw=true" title="beautify.vim demo" ></p>

<p>CSS-SCSS, JS-Coffeeなどの相互変換や、圧縮されたJS/CSSの整形などはお手の物です。</p>

<h2><a href="https://github.com/alpaca-tc/alpaca_tags">alpaca_tags</a></h2>

<p>tagsの非同期生成、tag用のunite-sourceなど同封しています。糞便利。</p>

<p><img class="image_on_frame center" src="https://github-camo.global.ssl.fastly.net/78073a9b0ac11577ea47c5083da6511140968510/687474703a2f2f6769667a6f2e6e65742f744944774866325a41702e676966" title="alpaca_tags.demo" ></p>

<p>京都のCamphorでの勉強会で初めてお披露目したので、あのメンバーと出会ったのもこれを作った時期だった気がする。いつだっけ。。</p>

<h2><a href="https://github.com/alpaca-tc/alpaca_octopress.vim">alpaca_octopress</a></h2>

<p>最近作った、Octopressの操作を非同期で実行するプラグインです。糞b</p>

<p><code>:Octopress preview</code>や<code>:Octopress gen_deploy</code>といった操作が非同期で行えるのが素晴らしい。</p>

<p>記事を書くのが随分楽になりました^^</p>

<h2><a href="https://github.com/alpaca-tc/vim-unite-watson.vim">vim-unite-watson.vim</a></h2>

<p><img class="image_on_frame center" src="https://f.cloud.github.com/assets/1688137/1726147/ac9b52fc-628a-11e3-8117-ef4824444729.gif" title="watsonのcapture" ></p>

<p><a href="http://goosecode.com/watson/">watson</a>用のUnite-sourceです。watson本体もガッツリ書き換えました。海外の方にも結構使ってもらえているようです。自身がプログラミングするとき、思考を止めないためにこのプラグインを作りました。</p>

<h3>その他、今年作ったプラグイン</h3>

<ul>
<li><a href="https://github.com/alpaca-tc/alpaca_remove_dust.vim">alpaca_remove_dust.vim</a></li>
<li><a href="https://github.com/alpaca-tc/alpaca_window.vim">alpaca_window.vim</a></li>
<li><a href="https://github.com/alpaca-tc/assignment">assignment</a></li>
<li><a href="https://github.com/alpaca-tc/neorspec.vim">neorspec.vim</a></li>
<li><a href="https://github.com/alpaca-tc/lang-8.vim">lang-8.vim</a></li>
<li><a href="https://github.com/alpaca-tc/rake.vim">rake.vim</a></li>
<li><a href="https://github.com/alpaca-tc/snail.vim">snail.vim</a></li>
<li><a href="https://github.com/alpaca-tc/unite-git-aliases">unite-git-aliases</a></li>
<li><a href="https://github.com/alpaca-tc/documentation">documentation</a></li>
</ul>


<h2>まとめ</h2>

<p>Vimプラグインを通じて、一杯勉強させてもらえていたようです。Vim力もだいぶ上がりました。</p>

<p>来年はVim本体をガシガシいじっていきたいと思います・T・</p>

<p>さて、自分の作ったVimプラグインを振り返ると、Vimとともに一年の思い出が振り返れるようです！</p>

<p><strong>ぜひ、他のVimmerもお試しあれ！</strong></p>

<p><em>P.S.</em></p>

<p>ほぼVimの記事だけで、Qiitaのストック数が1,000に到達しました。わーい。(白目)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆就活へ参加するときのノウハウまとめ]]></title>
    <link href="http://alpaca.tc/blog/diary/gyaku-syuukatsu-1.html"/>
    <updated>2013-12-25T23:23:00+09:00</updated>
    <id>http://alpaca.tc/blog/diary/gyaku-syuukatsu-1</id>
    <content type="html"><![CDATA[<h1>逆就活に参加してきました！</h1>

<p>世の中には<a href="http://www.studenthunting.com/">IT系逆就活</a>というイベントがあります。</p>

<p>東京で開催された<em>23,24日</em>にイベントに参加してきました。</p>

<!-- more -->


<p>僕は「東京の企業さんを知りたい」と思って参加してみました。</p>

<p>え、クリスマスって何それ美味しいの？</p>

<h2>この記事の目的</h2>

<ul>
<li>自分のための反省・備忘録</li>
<li>次回イベント参加予定者のためのメモ</li>
<li>イベントについて感想を書きたい(広めたい)</li>
</ul>


<p>特に、自分が<strong>「イベントに参加するメリットを最大化する」</strong>ことを目的にまとめます。</p>

<p>他の人には、多少参考になればという程度です。長いので、逆就活に関係の無い人は見ないことをお勧めします。</p>

<h2>どんなイベントなの？</h2>

<p>色んな企業さんとお話できます。楽しかったです！</p>

<p>pixiv, シーエーモバイル, 楽天, ネクスト, SanSan, GaiaX, リクルートホールディングス, 出版デジタル機構, ジャストシステム, エフォーション, イード, ABEJA, エイチーム, コロプラ, リッチメディア, ウイングル, Docomo, Microsoft&hellip;他数社(敬称略)</p>

<p>の企業さんが来てくださっていました。</p>

<h3>イベントの流れ</h3>

<p>イベントの体型は合同説明会の、企業と学生が入れ替わった感じでしょうか。
30分ごとに、企業は指名した学生との面談を繰り返します。</p>

<p>イベントの流れはこんな感じです。(企業側の流れは完全な憶測です)</p>

<ol>
<li>(学生) プロフィールをイベントページに公開</li>
<li>(企業) 学生のプロフィールを見て面白そうな人をリストアップ</li>
<li><strong>&mdash; イベント当日 &mdash;</strong></li>
<li>(企業) <em>名刺交換会</em>にて、気になる学生に挨拶をする</li>
<li>(企業) 会いたい学生に順位をつける(1~10位ぐらい)</li>
<li>(主催) 順位を元に8タームの配分を調整する</li>
<li><strong>面談 * 8</strong></li>
<li>懇親会</li>
<li><strong>&mdash; イベント翌日 &mdash;</strong> : マッチングできた企業さんから個別に面談</li>
</ol>


<h2>逆就活ノウハウ</h2>

<p>ノウハウって言い方だと、いかにも得意気ですね。笑</p>

<p>そうではなくて、イベントに参加して失敗したことの反省を書きます。</p>

<p>僕は仮説が間違っていたので、随分もったいないことをしましたね。。。</p>

<p>それぞれのレイヤーで、<strong>「間違っていた仮説」</strong>と<strong>「次の仮説」</strong>を書いておきます。(次回に反省を生かす！)</p>

<h3>プロフィール作成のノウハウ</h3>

<ul>
<li>[x] 選考を通るために、プロフィールを作り込めば良い</li>
<li>[o] 特定企業への熱烈なアピールのためのプロフィール + α</li>
</ul>


<p>今回、僕はプロフィールの作成において<strong>「選考を通る」</strong>ことのみを目的に作っていました。</p>

<p>そして、面談では30分という長い時間を使って、<em>何でも話せる</em>と思っていました。</p>

<p>完全に間違いです。その理由は、次の通りです。</p>

<ol>
<li>企業はプロフィールを見て、指名を決める(順位込み)</li>
<li>面談の30分で話せることはほとんどなく、プロフィールで示した内容の確認の時間だった</li>
</ol>


<p>思えば、イベントの選考に通ることを目的にするのは大変馬鹿げていましたね。。</p>

<h4>イベントの選考</h4>

<p>今回、イベント選考は若い方が担当していました。</p>

<p>なので、プロフィールは<strong>「なぜこの学生を選んだのか」</strong>と、選考担当が上司に言い訳できる内容さえ押さえていれば大丈夫なはず。</p>

<p>ここに重点をおくとは、非常に馬鹿なことをしました。</p>

<h4>プロフィールはこう作る</h4>

<p>となると、改善してやることはHPと一緒ですね。おぉ、簡単。</p>

<ol>
<li>興味をそそるコンテンツでページ(プロフィール)へ誘導する</li>
<li>ファーストビューで、離脱率を減らす</li>
<li>コンバージョン(次の選考/内定後の仕事)に向けて、必要なコンテンツを揃える</li>
</ol>


<p>プロフィール画面が画一的なレイアウトなので、特徴を付けづらいのが残念です。</p>

<h3>名刺交換のノウハウ</h3>

<ul>
<li>[x] 顔をがんばって覚える</li>
<li>[o] 顔は覚えない</li>
</ul>


<p>入れ替わり立ち代わりで、10~20人を覚えるのは無理です。笑</p>

<p>なので、<strong>MacBookAirで録画しながら名刺交換</strong>をします。</p>

<p>その場で覚える必要な無くなれば、随分楽に名刺交換できますね。</p>

<h3>面談</h3>

<ul>
<li>[x] 企業は人物を知りたいと思っており、30分でどれだけ自分のことを知ってもらえるかが重要</li>
<li>[x] 面談に来る企業は、自分にかなり興味がある</li>
<li>[o] 企業はその学生は<strong>「何が出来るか」を知りたい</strong>と思っており、企業の事業と一致するかが重要</li>
<li>[o] 面談に来る企業は、<strong>それぞれ目的が異なる</strong></li>
</ul>


<p>うーむ、これは一番戦略を間違えましたね。
Yahooの方に教えてもらえたような気がします。</p>

<p>まず、企業さんは「僕にとても興味を持ってくれている」という前提で考えていました。
その前提でたつと、おかしな面談になります。</p>

<h4>企業は何を考えている？</h4>

<p>そもそも、イベントに来る企業さんはそれぞれ目的が違うみたいですね。
多分、次のようなパターンに分かれると思います。</p>

<h5>ポジティブな目的</h5>

<ol>
<li>プロフィールを見て企業の採用基準に合致すると思い、確認のため</li>
<li>単に、面白そうな学生だから話したかった</li>
</ol>


<h5>ネガティブな目的</h5>

<p>企業はきっと多額のお金を主催者に払っています。
とすると、人事の方としても次のような思惑が出てくるのではないでしょうか。</p>

<ol>
<li>人事の新人教育のため、練習台としての面談</li>
<li>興味がない学生だけれど、8人まで希望を埋めないとお金が勿体ない</li>
<li>自社のセミナーへ参加者が増えれば、自分の評価に繋がる</li>
</ol>


<p>売上げは凄いけど、知名度の少ないベンチャー企業というのもあるので、(2,3)は十分に考えられます。</p>

<h4>面談のノウハウ</h4>

<p>面談は、企業も学生も貴重な時間を使って参加しています。しかしながら、先ほど述べたように企業さんが何を考えているか分かりません。</p>

<p>ということで、僕がまた参加する際には次のフローで面談を行おうと思います。</p>

<ol>
<li>面談開始のときに、面談の目的をお互いに確認する</li>
<li>その企業が求めている人材を確認する。(プロフィールのどこを見て来たのか、何位に指名したのか)</li>
<li>自分が出来ることと、企業に入ってやりたいことをプレゼンする</li>
<li>企業と雑談する</li>
</ol>


<p>そして、どこかで「あ、違うな。」と思ったら、もう面談は終えようかなと思います。</p>

<p>人事の方も疲れるので、休めるような会話に切り替えたいですね。</p>

<p>ただ、今回はそう思って切り替えて話した企業さんにNo.1学生に選ばれたので、就活って本当よく分かりません。</p>

<h2>まとめ</h2>

<p>まとめとして言うのなら、<strong>捨てること</strong>が大事だと思います。</p>

<p>もっと色んなものを捨てた方が良かったなと思います。</p>

<p>HPを作るときと一緒で、色んなことを捨象して集中するべきでした。せっかく、自分というコンテンツがあるのに、魅せ方へのこだわりが無かったですね。</p>

<p>ということで、次回参加する際には3社ぐらいからしか面談希望が来ないぐらいになれば合格かなぁ、と思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim中級者を脱する path編]]></title>
    <link href="http://alpaca.tc/blog/vim/jump-to-gem-path.html"/>
    <updated>2013-12-19T08:02:00+09:00</updated>
    <id>http://alpaca.tc/blog/vim/jump-to-gem-path</id>
    <content type="html"><![CDATA[<p>はい、pathとは<code>:set path</code>で出てくるやつのことです。
実際にはみなさん<code>gf</code>やファイル補完などでお世話になっていると思います。</p>

<p>今回はpathとは何かを説明して、.rbファイルのクラスからGemの定義元へ飛ぶ方法をやってみましょう。</p>

<!-- more -->


<p><strong>方法だけ知りたい人は、一番下までスクロールしてください</strong></p>

<h1>pathとは？</h1>

<p>Vimにおけるpathとは、<code>set path?</code>で出てくるpathです。</p>

<p>適当にファイルを開いてコマンドを打ってみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">set</span> <span class="nb">path</span>?
</span><span class='line'><span class="nb">path</span><span class="p">=</span>.<span class="p">,</span><span class="sr">/usr/</span><span class="nb">include</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを設定しておくことで何が嬉しいかというと、編集中の変数の定義元へ飛べたり、ファイルを検索出来たりします。つまるところ、Vimが<em>何かを探すときの基準になる</em>ディレクトリ達を指定することができます。</p>

<p>補完プラグインや、Vimの基本機能などもpathに依存していることが多いため、裏側では結構活躍している設定でもあります。</p>

<h2><code>gf</code>でGemの定義元に飛ぶ</h2>

<p><code>gf</code>は通常、カーソル</p>

<p>Rubyを編集する際、Vimのビルトインの<code>ftplugin/ruby.vim</code>が読み込まれ、<code>gf</code>が自動的に関数にマッピングされます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">set</span> <span class="k">filetype</span><span class="p">=</span><span class="k">ruby</span>
</span><span class='line'><span class="p">:</span>nmap gf
</span><span class='line'><span class="k">n</span>  gf          *@:<span class="p">&lt;</span>C<span class="p">-</span>U<span class="p">&gt;</span>exe <span class="p">&lt;</span>SNR<span class="p">&gt;</span><span class="m">121</span>_gf<span class="p">(</span><span class="k">v</span>:count1<span class="p">,</span><span class="s2">&quot;gf&quot;</span><span class="p">,</span><span class="s1">&#39;edit&#39;</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このおかげで、通常の<code>gf</code>が拡張されて幾つかのケースで<code>gf</code>が使えるようになります。(Rails.vimも同じ手法を使っていますね。)</p>

<p>具体的には<code>require 'path/to/file'</code>やload, autoloadで書いたファイルパスへ飛ぶことができます。</p>

<p>内部では拡張子を取り除いたり、ファイル名に不要な文字を変換したりしていますが、そのオプションについては、今回は割愛します。</p>

<h3>pathにRubyのload_pathを追加する</h3>

<p>Rubyを編集中に、Gemの定義元へ移動する話をしましょう。</p>

<p>まずRubyについて理解しておく必要があるのは、load_pathの仕組みです。Rubyは<code>require</code>などを使用したときに、指定されたファイルを<code>$LOAD_PATH</code>のディレクトリ一覧の中から探します。</p>

<p>下記のようなコマンドを打つことで、デフォルトの$LOAD_PATHを探すことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="o">-</span><span class="n">e</span> <span class="s1">&#39;puts $LOAD_PATH&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gemfileを定義した場合、この$LOAD_PATHにそれらのGemの場所が追加されるので<code>require</code>で使うことがきるようになるんですね。</p>

<p>それでは、VimにもGemfileから取ってきたディレクトリ一覧を与えてやることで、定義元を探し出せるようにしましょう。</p>

<h3>Gemfileからディレクトリ一覧を取り出す</h3>

<p><code>bundle show --paths</code>を使うことで、一覧情報を取り出せます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="n">show</span> <span class="o">--</span><span class="n">paths</span>
</span><span class='line'><span class="sr">/Users/</span><span class="n">alpaca</span><span class="o">-</span><span class="n">tc</span><span class="o">/.</span><span class="n">rbenv</span><span class="o">/</span><span class="n">versions</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p247</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="no">RedCloth</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">9</span>
</span><span class='line'><span class="o">/</span><span class="no">Users</span><span class="o">/</span><span class="n">alpaca</span><span class="o">-</span><span class="n">tc</span><span class="o">/.</span><span class="n">rbenv</span><span class="o">/</span><span class="n">versions</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p247</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">bundler</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="o">/</span><span class="no">Users</span><span class="o">/</span><span class="n">alpaca</span><span class="o">-</span><span class="n">tc</span><span class="o">/.</span><span class="n">rbenv</span><span class="o">/</span><span class="n">versions</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p247</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">chunky_png</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>この情報を<code>setl path=...</code>と与えてやれば、<code>gf</code>を使って定義元に飛べるようになります。</p>

<h3><code>set path=</code>を使って定義する</h3>

<p><a href="https://gist.github.com/8031905">こちらのスクリプト</a>をvimrcに貼付けましょう。<a href="https://github.com/vim-jp/vital.vim">vital.vim</a>依存です(unite.vim, neocompleteがあれば動作します)</p>

<p>これで、GemPathを読み込む<code>:LoadGem</code>というコマンドが作られます。</p>

<p>下記のような動作で定義元に飛べるのが確認できると思います。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/jump-to-gem-path/hM4zx40RmT.gif" title="gemジャンプデモ" ></p>

<p>無事動いていますね。</p>

<h2>まとめ</h2>

<p>今回はpathについて、簡単に説明しました。</p>

<p>次回は、pathを活用してさらに<code>include</code>, <code>includeexpr</code>あたりをやります。</p>

<p>この辺を勉強すると、自分の環境用にファイル補完を作り上げられます。 neocompleteのfile/includeあたりが書けるようになりますよ〜</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仕事が捗る！VimからGitを使う最適解]]></title>
    <link href="http://alpaca.tc/blog/vim/how-to-use-vim-unite-giti.html"/>
    <updated>2013-12-17T23:36:00+09:00</updated>
    <id>http://alpaca.tc/blog/vim/how-to-use-vim-unite-giti</id>
    <content type="html"><![CDATA[<p>先日の記事でもチラッと出てきた<a href="https://github.com/kmnk/vim-unite-giti">vim-unite-giti</a>というプラグインがあります。</p>

<p><strong>ものすごーーーく便利</strong>なプラグインなんですが、何故かほとんど話を聞かないプラグインです。</p>

<p>先日の記事でも、git系のプラグインは「知らなかった」という話を沢山聞きました。せっかくなので使い方を紹介します。</p>

<!-- more -->


<h2>今回紹介するのはvim-unite-giti!!</h2>

<p>何はともあれ、<strong>まずは動画をみてくれ。</strong></p>

<iframe width="560" height="420" src="http://www.youtube.com/embed/jCgcpIO9oBs?color=white&theme=light"></iframe>


<p>とにかく、uniteインターフェースは操作を覚えることが少ない。</p>

<p>今回も、幾つかのUniteコマンドを使っているけれど、基本的に「選択」→「アクション」の動作しかない。</p>

<h3>:Unite giti/status</h3>

<p>add, unstage, checkoutなどの操作が簡単ですね</p>

<p>conflictがあれば、すぐ見れます。「選択」→「commitアクション」と進めば、指定したファイルだけのコミットもお手軽に作れます(!!)</p>

<h3>:Unite giti/branch</h3>

<p>tracking, chckout, deleteなどの操作が簡単ですね。</p>

<p>branchを切るのにわざわざShellを使うなんて。あなた、Vimと触れ合う時間が減ってしまうではないですか。</p>

<h3>:Unite giti/log</h3>

<p>紹介していませんが、普通に便利です。vimdiffなどを見る事も簡単です。</p>

<h2>vim-unite-giti以外のプラグイン</h2>

<h3><em>git-vim</em> :GitDiff, :Git push</h3>

<p>こちらは、特に驚きはないので初めて使う人以外は見なくてもいいです。</p>

<iframe width="560" height="420" src="http://www.youtube.com/embed/wWI3Wb-0Vw4?color=white&theme=light"></iframe>


<p>言わずもがな、コマンド名の通りです。</p>

<p>git-vimを使って何がうれしいかと言うと、それなりに補完ができる点です。</p>

<h3><em>fugitive</em> :Gcommit, :Gblame</h3>

<p>すでに語り尽くされているので、ここでは取り上げません。</p>

<p>他のプラグインにもにたようなコマンドがありますが、色付きなのと、機能性が優れているのでfugitiveがおすすめです。</p>

<h2>vimrc</h2>

<p>今回の動画で使用したvimrcと同じような設定です</p>

<p><a href="https://gist.github.com/qickstarter/8008989">vimrc Gist</a></p>

<h2>まとめ</h2>

<p>ujihisaさんに憧れてのYoutube記事です。笑</p>

<p>余談ですが、作者の<a href="https://github.com/kmnk">kmnk</a>さんのコードは<strong>めちゃくちゃ奇麗</strong>です。</p>

<p>今までで読んできた中で、<em>一番奇麗なVimLのコード</em>でした。ほどよい抽象化、適切な命名、整理されたファイル達。率直に、この人と一緒に仕事出来る人は幸せだろうなぁと感じました。</p>

<p>vim-unite-gitiを作ってくださって感謝します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyのクラス変数について詰まったのでヘルプ]]></title>
    <link href="http://alpaca.tc/blog/ruby/ruby-class-variable.html"/>
    <updated>2013-12-16T01:10:00+09:00</updated>
    <id>http://alpaca.tc/blog/ruby/ruby-class-variable</id>
    <content type="html"><![CDATA[<p>基本的に、仕事でクラス変数を扱うことはほぼ無いです。</p>

<p>今回は遊びのコードを書いていて、悩んだことをまとめました。</p>

<!-- more -->


<h1>Rubyのクラス変数の扱いが難しい&hellip;。</h1>

<p>これ、結構Ruby書いている自分でも初めて遭遇して悩む問題だった。</p>

<p>まず、次のような動くコードを書いてみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="vc">@@val</span> <span class="o">=</span> <span class="s1">&#39;Node&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Branch</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="vc">@@val</span> <span class="o">=</span> <span class="s1">&#39;Branch&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">Node</span><span class="o">.</span><span class="n">class_variable_get</span><span class="p">(</span><span class="s1">&#39;@@val&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Node&#39;</span>
</span><span class='line'><span class="nb">p</span> <span class="no">Branch</span><span class="o">.</span><span class="n">class_variable_get</span><span class="p">(</span><span class="s1">&#39;@@val&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Branch&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ふむ、それぞれの派生クラスでクラス変数が使えますね。</p>

<p>では、続いて基底クラスにもクラス変数を与えてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="vc">@@val</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="vc">@@val</span> <span class="o">=</span> <span class="s1">&#39;Node&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Branch</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="vc">@@val</span> <span class="o">=</span> <span class="s1">&#39;Branch&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">Node</span><span class="o">.</span><span class="n">class_variable_get</span><span class="p">(</span><span class="s1">&#39;@@val&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Branch&#39;</span>
</span><span class='line'><span class="nb">p</span> <span class="no">Branch</span><span class="o">.</span><span class="n">class_variable_get</span><span class="p">(</span><span class="s1">&#39;@@val&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Branch&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ooops!!! 派性クラス内のクラス変数が、基底クラス変数を参照しよる！！</p>

<h2>解決編</h2>

<p>やりたいことは、派生クラスの子クラスに共通の変数を持たせるということ。</p>

<p>うーん、意外と難しい！</p>

<p>どうもクラス変数という感じではなくなるけれど、こうするしかないのだろうか&hellip;。</p>

<p>メソッドにしてみたら、とっても気持ちが悪い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">val</span>
</span><span class='line'>      <span class="s1">&#39;Base&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">val</span>
</span><span class='line'>      <span class="s1">&#39;Node&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Branch</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">val</span>
</span><span class='line'>      <span class="s1">&#39;Branch&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">Node</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:val</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Node&#39;</span>
</span><span class='line'><span class="nb">p</span> <span class="no">Branch</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:val</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Branch&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだと、一応コードとして動く。 ただ、<strong>これは無いだろ感</strong>あるよね。</p>

<p>しかし、クラスインスタンス変数だと継承されないし、こうするしかないのかなぁ。</p>

<p><strong>だれか正しい方法があれば、教えてください！</strong> >_&lt;</p>

<h3>追記</h3>

<p>思いついたんだけど、継承するときにクラスインスタンス変数を渡せばいいのかな？</p>

<p>どうでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="vi">@val</span> <span class="o">=</span> <span class="s1">&#39;Base&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">inherited</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
</span><span class='line'>    <span class="n">klass</span><span class="o">.</span><span class="n">instance_variable_set</span><span class="p">(</span><span class="s1">&#39;@val&#39;</span><span class="p">,</span> <span class="vi">@val</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="o">&lt;</span> <span class="no">Base</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Branch</span> <span class="o">&lt;</span> <span class="no">Base</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="no">Node</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s1">&#39;@val&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Base&#39;</span>
</span><span class='line'><span class="nb">p</span> <span class="no">Branch</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s1">&#39;@val&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &#39;Base&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unite.vimとwatsonを使ったワークフロー]]></title>
    <link href="http://alpaca.tc/blog/vim/using-vim-unite-watson.html"/>
    <updated>2013-12-13T02:29:00+09:00</updated>
    <id>http://alpaca.tc/blog/vim/using-vim-unite-watson</id>
    <content type="html"><![CDATA[<p>最近、vim-unite-watsonを開発しました。</p>

<p>これが、watsonの作者であるnhmoodさんにも好評で、僕自身ワークフローが変化して、だいぶ作業しやすくなりました。</p>

<p>今回は、タスク管理をしたい人向けに、僕なりのワークフロー管理を紹介します。</p>

<!-- more -->


<h1>ワークフローとVim</h1>

<p>僕は普段、Webサービスの構築・保守を行う仕事をしています。</p>

<p>そこでは、基本的なフローは次のような流れです。</p>

<ol>
<li>新機能・バグに対してIssueを発行する(あるいは既にTODOリストにある)</li>
<li>トピックブランチを作る</li>
<li>コードを書く</li>
<li>コミット &ndash;> Pull-Requestを送る &ndash;> マージする</li>
</ol>


<p>では、Vimを一度も閉じることなくこれらの作業をしてみます。</p>

<h2>1. Issueの発行</h2>

<h3>1-1. TODOをコードに入力する</h3>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/workflow_1.png" title="本番環境用にViewを作成すると記入する" ></p>

<h3>1-2. IssueをGithubにあげる</h3>

<p>インラインIssue管理の<a href="http://alpaca.tc/blog/ruby/how-to-use-watson.html">watson</a>を使って、GithubにIssueをあげます</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/workflow_2.png" title=":Watsonのデモ" ></p>

<p>Watsonを使えば、Vimから簡単にIssue管理を行うことが出来ますね。</p>

<h2>2. 作業の目処を立てる</h2>

<p>さて、これでIssueは挙げられたので、次はコードの改修をしていきます。</p>

<h3>2-1. トピックブランチを作る</h3>

<p>ブランチの作業は、<a href="https://github.com/alpaca-tc/vim-unite-giti">vim-unite-giti</a>を使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>Unite giti/branch
</span></code></pre></td></tr></table></div></figure>


<p>新しいブランチの名前を入力して、<code>[checkout branch]</code>の行を選択します。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/workflow_3.png" title="Unite gitiのデモ" ></p>

<p>すると、新しいブランチが作られました。</p>

<h3>2-2. コードの改修を行う場所に印をつけて行く</h3>

<p>コードの改修は、多くの場合幾つかのファイルに跨がります。</p>

<p>そのため、経験から作業が必要な箇所に目処をつけて、コメントを書いて行きます。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/workflow_4.png" title="" ></p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/workflow_5.png" title="" ></p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/workflow_6.png" title="" ></p>

<p>todoの内容は、watsonによって管理されるので、vim-unite-watsonを使えば一覧としてみることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>Unite watson/dirty
</span></code></pre></td></tr></table></div></figure>


<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/workflow_7.png" title="unite-watsonのdemo" ></p>

<p>これで、issueを解決するために必要な作業の一覧を自分で作ることが出来ました。</p>

<p>Unite上のコメントを選択すると、該当箇所に飛べます。</p>

<p>後は、</p>

<ol>
<li>該当箇所に飛ぶ</li>
<li>コードを修正する</li>
<li>解決したら、コメントを削除する</li>
</ol>


<p>を<code>:Unite watson/dirty</code>が空になるまで繰り返します。</p>

<p>watsonの結果リストが空になれば、issueの問題を解決したことになり、次の作業に移ります。</p>

<h3>3. GithubにPull-Requestする</h3>

<p>これは、各々方法が分かれるかと思います。</p>

<p>Vimから出ないでPull-Requestを送るには、<code>:!git push</code> &amp;&amp; <code>:!hub pull-request -h ...</code>というのが一番分かりやすいでしょうか。</p>

<p>僕は、<code>:Unite giti/pull_request</code>で送るようにしています。</p>

<h2>まとめ</h2>

<p>Watsonやgitiはかなり便利です。</p>

<p>特に、watsonはコーディング作業をマネジメントしたい人に向いていると思います。
作業時間の見積もりや、タスク管理を考えながらコーディングする人には向いているプラグインなのではないでしょうか。</p>

<p>僕は経営学部にいるので、すっかりタスク管理や時間計測を気にしちゃうようになりました。。</p>

<p><strong>今回紹介したプラグイン</strong></p>

<ul>
<li><a href="https://github.com/alpaca-tc/vim-unite-watson.vim">vim-unite-watson</a></li>
<li><a href="https://github.com/kmnk/vim-unite-giti">vim-unite-giti (本家)</a></li>
<li><a href="https://github.com/alpaca-tc/vim-unite-giti">vim-unite-giti (giti/pull_request追加版)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NeoComplete vs YouCompleteMe]]></title>
    <link href="http://alpaca.tc/blog/vim/neocomplete-vs-youcompleteme.html"/>
    <updated>2013-12-10T00:04:00+09:00</updated>
    <id>http://alpaca.tc/blog/vim/neocomplete-vs-youcompleteme</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://atnd.org/events/45072">Vim Advent Calendar 2013</a>の10日目です。</p>

<p>先日は<a href="https://twitter.com/Linda_pp">@Linda</a>さんの<a href="http://rhysd.hatenablog.com/entry/2013/12/09/001219">無数のパッチを組み合わせて君だけの MacVim を作ろう！</a>でした。</p>

<p>大学卒業までに、自分専用Vimを作ろうと思っている自分にとって大変参考になる記事でした。</p>

<h1>NeoComplete VS YouCompleteMe</h1>

<p>さてさて、本日のAdvent CalendarではVimの補完プラグインの2大巨頭を比較してみようと思います。</p>

<!-- more -->


<ul>
<li><a href="https://github.com/Shougo/neocomplete.vim">NeoComplete</a> &ndash; (Shougoさん作)</li>
<li><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a> &ndash; (Valloricさん作)</li>
</ul>


<p>元々、僕は<strong>大のShougo wareファン</strong>です。(Sourceや、本体への貢献も少ししています)</p>

<p>そんな僕もVimを探求する気持ちから、ついYouCompleteMeに手を出してしまいました!!!</p>

<p><strong>「は&hellip;速いぞこいつ！！」</strong></p>

<p>その補完速度の衝撃さることながら、他にも素晴らしいことが。</p>

<p>つい、NeoCompleteからの乗り換えが脳裏をよぎり、2週間使ってみることにしました。</p>

<h2>何について書くの？</h2>

<p>結論から言うと、NeoCompleteに戻ってきました。</p>

<p>しかし、<strong>NeoCompleteに改善の余地がある</strong>ことに気付きました。</p>

<p>「YCMのここが良かったから、NeoCompleteに取り入れよう！」という話をしたいと思います。</p>

<h2>YouCompleteMeの良かった点</h2>

<ul>
<li><strong>補完が早い</strong></li>
<li><strong>ファイル補完</strong>が素晴らしい</li>
<li>設定がほぼ不要</li>
<li>jedi.vim / clang-completeとの連携が容易</li>
<li>fuzzy補完が使いやすい！</li>
<li>YCM、と略しやすい。←</li>
</ul>


<p>補完スピードに関しては、感動しました。</p>

<h3>ファイル補完機能</h3>

<p>特筆すべきはファイル補完機能についてです。</p>

<p>使ってわかる、YCMのファイル補完の素晴らしさ。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/file_complete.png" title="YCMのファイル補完機能" ></p>

<ul>
<li>&ldquo;[Dir], [File]&#8221;で、補完候補の種類を入力している</li>
<li>ファイル補完時、バッファ補完などのノイズが入らない</li>
</ul>


<p>今まで、NeoCompleteで満足していたんですが、YCMを使って初めて改善の余地があることに気付きました。</p>

<h2>YouCompleteMeの悪かった点</h2>

<ul>
<li>補完の種類が少ない</li>
<li>カスタマイズができない。</li>
<li>補完候補の<code>dup</code>フラグが全てオン</li>
</ul>


<p>いや、一応カスタマイズしてNeoCompleteの移植できたんですけどね。疲れました。</p>

<h2>NeoCompleteを改善する</h2>

<p>さて、YCMを使って2週間。良いところをいくつか取り入れましょう。</p>

<p><strong>(追記: ファイル補完に関する修正は、本家に取り込まれました)</strong></p>

<h3>1. file補完のノイズを改善する</h3>

<p>デフォルトのNeoCompleteのfile補完のrankが低いため、ファイル補完時に他の候補が上にきてしまいます。</p>

<p>ファイル補完の優先順位をあげましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">call</span> neocomplete#custom#source<span class="p">(</span><span class="s1">&#39;file&#39;</span><span class="p">,</span> <span class="s1">&#39;rank&#39;</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これに関しては、<strong>元々のファイル補完のrankがなぜ低いのか疑問</strong>です。理由があるのでしょうか。</p>

<h3>2. file補完で[Dir], [File]を表示する</h3>

<p>NeoCompleteに<a href="https://gist.github.com/qickstarter/7872458">パッチ</a>をあてます。</p>

<p>これで、YouCompleteMeと同じファイル補完を実現できます。</p>

<h3>3. 補完速度を向上する</h3>

<p>YCMでは、補完が少し止まる感覚が一切ありませんでした。</p>

<p>NeoCompleteはsourceを駆け巡って、頑張って補完候補を取得しているのである程度は仕方ないです。</p>

<p>ただ、自分の環境にあわせれば、補完スピードはあがるはずです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; 極端な例ですが、下記のような操作で補完をチューニングできます</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 補完を始めるキーワード長を長くする</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#sources#<span class="nb">syntax</span>#min_keyword_length <span class="p">=</span> <span class="m">4</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#auto_completion_start_length <span class="p">=</span> <span class="m">4</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 補完が止まった際に、スキップする長さを短くする</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#skip_auto_completion_time <span class="p">=</span> <span class="s1">&#39;0.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 使用する補完の種類を減らす</span>
</span><span class='line'><span class="c">&quot; 現在のSourceの取得は `:echo keys(neocomplete#variables#get_sources())`</span>
</span><span class='line'><span class="c">&quot; デフォルト: [&#39;file&#39;, &#39;tag&#39;, &#39;neosnippet&#39;, &#39;vim&#39;, &#39;dictionary&#39;, &#39;omni&#39;, &#39;member&#39;, &#39;syntax&#39;, &#39;include&#39;, &#39;buffer&#39;, &#39;file/include&#39;]</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:neocomplete#sources <span class="p">=</span> {
</span><span class='line'>  \ <span class="s1">&#39;_&#39;</span> : [<span class="s1">&#39;vim&#39;</span><span class="p">,</span> <span class="s1">&#39;omni&#39;</span><span class="p">,</span> <span class="s1">&#39;include&#39;</span><span class="p">,</span> <span class="s1">&#39;buffer&#39;</span><span class="p">,</span> <span class="s1">&#39;file/include&#39;</span>]
</span><span class='line'>  \ }
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 特定のタイミングでのみ使う補完は、直接呼び出すようにする</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">X</span><span class="p">&gt;&lt;</span>C<span class="p">-</span>F<span class="p">&gt;</span>  neocomplete#start_manual_complete<span class="p">(</span><span class="s1">&#39;file&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">X</span><span class="p">&gt;&lt;</span>C<span class="p">-</span>K<span class="p">&gt;</span>  neocomplete#start_manual_complete<span class="p">(</span><span class="s1">&#39;dictionary&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span>expr<span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">X</span><span class="p">&gt;</span><span class="k">s</span>      neocomplete#start_manual_complete<span class="p">(</span><span class="s1">&#39;neosnippet&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>浮気して、彼女の良さに気付くパターンです。</p>

<p>YCMを使って気付きました。なんだかんだ<strong>NeoCompleteが最高</strong>ですね！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インラインTODO管理のWatsonを使う]]></title>
    <link href="http://alpaca.tc/blog/ruby/how-to-use-watson.html"/>
    <updated>2013-12-03T23:49:00+09:00</updated>
    <id>http://alpaca.tc/blog/ruby/how-to-use-watson</id>
    <content type="html"><![CDATA[<p>最近、Githubのトレンドにも入っていた<a href="http://goosecode.com/watson/">Watson</a>を紹介します。</p>

<!-- more -->


<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/watson.png" title="watsonのデモ" ></p>

<h2>インラインTODO管理とは何か</h2>

<p>もしあなたがエンジニアなら、次のようなコメントを見たことがあると思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">logged_in?</span>
</span><span class='line'>    <span class="c1"># TODO 管理ユーザーと処理を分ける</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように、コード内には至る所にコメントが書かれています。
単なるコードの説明に限らず、修正が必要な内容を記述したものも多くあります。</p>

<p>しかしながら、しばしばこういったコメントは放置され、コードの中に埋もれたままになってしまうこともあります。</p>

<p>Watsonは、コード内に書かれたコメントを走査し、近代的な管理ツールに流し込むことでIssueを管理するツールです。</p>

<h2>どうやって使うのか</h2>

<p>watsonを使って、コード内に記述されたコメントを洗い出して、GithubのIssueに登録してみましょう。</p>

<h3>ステップ1: watsonのインストール</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem install watson
</span></code></pre></td></tr></table></div></figure>


<h3>ステップ2: watsonの初期化</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>path/to/project_dir
</span><span class='line'><span class="nv">$ </span>watson
</span><span class='line'><span class="c"># 一旦&lt;Ctrl-C&gt;で終了してください。</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>.watsonrc</code>が自動的に作成されるので、プロジェクトに合わせて走査するディレクトリなどを設定します。</p>

<p>例として、Railsプロジェクト用の<a href="https://gist.github.com/7770689">.watsonrc</a>を貼付けておきます。</p>

<h3>ステップ3: watsonの実行！！</h3>

<p>watsonを使うときは、独自のタグを使ってコメントを書いておきます。</p>

<ul>
<li><code>[todo] - タスクの内容を記入する</code></li>
<li><code>[review] - 他の人に意見を求めるような内容を記入する</code></li>
<li><code>[fix] - バグの内容を記入する</code></li>
</ul>


<p>試しに、適当なファイルを開いて、上記のようなフォーマットでコメントを記入してみてください。</p>

<p>後は、再度<code>watson</code>と打って実行！</p>

<p>めでたしめでたし。
プロジェクト内のTODOなどが、一覧で出力されます。</p>

<h3>ステップ4: githubへIssue登録する</h3>

<p>先ほどの出力した内容を、Githubへ一括同期しましょう。</p>

<p>まず、Githubのリポジトリをwatsonに認識させます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>watson --remote github
</span></code></pre></td></tr></table></div></figure>


<p>英語のコメントに沿って、情報を入力していきましょう。</p>

<p>続いて、Issueを登録します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>watson --update
</span></code></pre></td></tr></table></div></figure>


<p>処理が終わると、Githubのissueへの登録が完了です。</p>

<p><img class="image_on_frame center" src="http://alpaca.tc/images/blog/watson_issue_preview.png" title="githubのissueプレビュー" ></p>

<h2>まとめ</h2>

<p>watsonは先月ぐらいに注目され始めた新しいプロジェクトです。</p>

<p>今後は、コメントを活用して様々な処理を行えるように拡張されると思うので、動向が楽しみですね。</p>

<h3>watsonの現状</h3>

<ul>
<li>Ruby初心者の人が作ったため、コードがよろしくない(PR中)</li>
<li>今のところ対応している管理ツールは、githubとbitbucket。</li>
<li>安定版に必要な機能が未実装。なので、新機能のPRがなかなか取り入れられない状況。数ヶ月待たないといけなさそう。</li>
<li>対応しているファイルタイプがまだ少ない</li>
</ul>

]]></content>
  </entry>
  
</feed>
