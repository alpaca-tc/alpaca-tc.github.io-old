<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[アルパカエンジニアのブログ]]></title>
  <link href="http://alpaca-tc.github.io/atom.xml" rel="self"/>
  <link href="http://alpaca-tc.github.io/"/>
  <updated>2013-11-13T18:18:59+09:00</updated>
  <id>http://alpaca-tc.github.io/</id>
  <author>
    <name><![CDATA[alpaca-tc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim中級者を脱する スコープ編]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/break-vim-beginners-scope.html"/>
    <updated>2013-11-13T17:26:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/break-vim-beginners-scope</id>
    <content type="html"><![CDATA[<p>スコープというのは、<code>宣言の場所により決定される変数やプロシ-ジャの有効範囲</code>ということで</p>

<p>いわゆるグローバル変数や、ローカル変数などと呼ばれるものです。
個人的に、Vimプラグインを作り始めて一番ハマったのが<strong>スコープの問題</strong>でした。</p>

<p>vimrcの修正の時に、コピーペーストばかりしていると自分でも何やっているのか理解できないままですよね。</p>

<p>という訳で、よく登場しそうなスコープを少し理解してみましょう。</p>

<h2>よく見るスコープ一覧</h2>

<ul>
<li><code>g:</code>グローバルスコープ</li>
<li><code>a:</code>関数内スコープ</li>
<li><code>s:</code>スクリプトスコープ</li>
<li><code>b:</code>バッファスコープ</li>
<li><code>let huga=...</code>などの接頭辞なし変数</li>
</ul>


<h3><code>g:</code>スコープ</h3>

<p><code>let g:neocomplete#enable_at_startup = 1</code></p>

<p>こんな感じで、プラグインの設定にはよく使われるスコープです。
見てのとおり、<strong>グローバルなスコープとしてどこでも参照できます。</strong></p>

<p>スコープの変数を初期化するには、下記のようなコードを使います。
プラグインによる大量のエラーコードによって操作できなくなるので、嫌いな人のvimrcの末尾に書き込んでください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">for</span> <span class="nb">key</span> <span class="k">in</span> keys<span class="p">(</span><span class="k">g</span>:<span class="p">)</span>
</span><span class='line'>  execute <span class="s1">&#39;unlet g:&#39;</span> . <span class="nb">key</span>
</span><span class='line'><span class="k">endfor</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>a:</code>スコープ</h3>

<p>個人的に一番理解しがたいスコープです。
関数内で、引数を参照するときに使用するスコープ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">g</span>:huga<span class="p">(</span><span class="k">a</span><span class="p">,</span> <span class="k">b</span><span class="p">)</span>
</span><span class='line'>  echo <span class="k">a</span>:
</span><span class='line'><span class="c">  &quot;=&gt; {&#39;0&#39;: 0, &#39;000&#39;: [], &#39;b&#39;: &#39;b&#39;, &#39;a&#39;: &#39;a&#39;, &#39;firstline&#39;: 5, &#39;lastline&#39;: 5}</span>
</span><span class='line'>  echo <span class="k">a</span>:<span class="k">b</span>
</span><span class='line'><span class="c">  &quot;=&gt; &#39;b&#39;</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">call</span> <span class="k">g</span>:huga<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで使います。他言語から移ってきた人には、正直使いづらい。
あー、なるほど関数内でだけ有効なスコープなのか。と思っていたらそれも間違い。</p>

<p>下記のようにすると、<strong>グローバルなスコープとして参照できます。</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">a</span>:huga<span class="p">(</span><span class="k">a</span><span class="p">,</span> <span class="k">b</span><span class="p">)</span>
</span><span class='line'>  echo <span class="k">a</span>:
</span><span class='line'><span class="c">  &quot;=&gt; {&#39;0&#39;: 0, &#39;000&#39;: [], &#39;b&#39;: &#39;b&#39;, &#39;a&#39;: &#39;a&#39;, &#39;firstline&#39;: 5, &#39;lastline&#39;: 5}</span>
</span><span class='line'>  echo <span class="k">a</span>:<span class="k">b</span>
</span><span class='line'><span class="c">  &quot;=&gt; &#39;b&#39;</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">call</span> <span class="k">a</span>:huga<span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>けれど、<code>echo a:</code>は動かない。
僕には真実が分からない。</p>

<h3><code>s:</code>スコープ</h3>

<p>scriptのファイル内でのみ有効なスコープです。
プラグインで、プライベートなメソッドや定数を作るときによく使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">s</span>:script_scope <span class="p">=</span> <span class="s1">&#39;外部からは参照できない&#39;</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> <span class="k">s</span>:script_scope_method<span class="p">()</span>
</span><span class='line'><span class="c">  &quot; プライベートメソッドとしてよく使われる</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>実は、この<code>s:</code>から始まる関数は、スクリプトがsourceされるときに置き換えられます。
<code>&lt;SNR&gt;1_script_scope_method</code>という感じの形になります。
えぇ、そうです。<strong>グローバルなスコープとして参照できます。</strong></p>

<p>この<code>&lt;SNR&gt;</code>の後にどの数値が割り振られているかは、<code>:scriptnames</code>で参照できます。</p>

<p>あるいは、こんな感じでも取得できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span> <span class="k">s</span>:SID<span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> matchstr<span class="p">(</span>expand<span class="p">(</span><span class="s1">&#39;&lt;sfile&gt;&#39;</span><span class="p">),</span> <span class="s1">&#39;&lt;SNR&gt;\zs\d\+\ze_SID$&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">endfun</span>
</span><span class='line'>echo <span class="k">s</span>:SID<span class="p">()</span> &quot;<span class="p">=&gt;</span> <span class="m">244</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>s:SID()</code>は<code>&lt;SID&gt;SID()</code>としても使えて、<code>&lt;SNR&gt;...</code>に置き換わるのでグローバルで使えます。
マッピングの時に、scriptスコープを使いたかったら必須ですね。</p>

<p><code>nnoremap s :echo &lt;SID&gt;SID()&lt;CR&gt;</code></p>

<p>ただし、s:変数は基本的には聖域です。
あーややこしい!!!</p>

<h3><code>b:</code>スコープ</h3>

<p>バッファ単位のスコープです。
ファイルタイプによる設定や、一時バッファによるプラグインの変数などはこのスコープを使います。</p>

<ul>
<li>ファイルタイプの変更をしたら&hellip;<code>b:current_syntax</code>, <code>b:did_ft_plugin</code>, <code>b:did_indent</code>etcが初期化&amp;格納されます</li>
<li>Uniteを起動したら<code>b:unite</code>に、VimShellを起動したら<code>b:vimshell</code>にデータが格納されます。</li>
</ul>


<p>Uniteのデバッグするときには、<code>echo b:unite.candidates</code>などを参照しましょう。</p>

<p>バッファが削除される<code>:bdelete</code>のタイミングで消去されます。
あぁ、ようやくまともなスコープだ。</p>

<h3><code>let huga=...</code>などの接頭辞なし変数</h3>

<p>えぇ。<strong>グローバルなスコープとして参照できます。</strong>
お前もか！</p>

<p>マナーとしては、やはり<code>g:</code>で宣言したいところですが、
Vimにデフォルトで入っているプラグインは、容赦なくこの変数を使ってきます。</p>

<p><code>:echo loaded_*&lt;Tab&gt;</code>などすれば、奴らを見つけられるはずです。</p>

<p>細かいことを言えば、関数内ならばローカルスコープです。
あるいは、ペチパーには理解しやすいスコープなのかもしれません。</p>

<h2>スコープのまとめ</h2>

<ul>
<li>スコープは<strong>ほとんどグローバルで参照できる</strong></li>
<li>getbufvar()やgettabvar()などでスコープへアクセス出来るため、聖域はほとんど無い</li>
<li>VimLは枠にハマらない言語仕様を持っている</li>
</ul>


<p><strong>正直今でも理解出来ていない</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript補完プラグインのTernがすごい]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/how-to-use-tern-vim.html"/>
    <updated>2013-11-13T14:40:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/how-to-use-tern-vim</id>
    <content type="html"><![CDATA[<p>「え、JavaScriptを書いているのに、Tern使ってないの？」</p>

<p>ダサい。イケてない。
あぁ、残念。</p>

<p><a href="https://github.com/marijnh/tern">Tern</a>は、marijnhという凄いエンジニアの人が作っているJavaScriptの動的補完プラグイン</p>

<p>コードを動的にパースして、今カーソルがある変数の型まで調べて補完しちゃってくれる。
設定をすれば、jQueryなどのプラグインでの諸々も補完しちゃう凄いやつなのだ。</p>

<p>まぁ、何はともあれ一度使ってみてください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> has<span class="p">(</span><span class="s1">&#39;python&#39;</span><span class="p">)</span> &amp;&amp; executable<span class="p">(</span><span class="s1">&#39;npm&#39;</span><span class="p">)</span>
</span><span class='line'>  NeoBundleLazy <span class="s1">&#39;marijnh/tern_for_vim&#39;</span><span class="p">,</span> {
</span><span class='line'>        \ <span class="s1">&#39;build&#39;</span> : <span class="s1">&#39;npm install&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>        \ <span class="s1">&#39;functions&#39;</span>: [<span class="s1">&#39;tern#Complete&#39;</span><span class="p">,</span> <span class="s1">&#39;tern#Enable&#39;</span>]<span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;filetypes&#39;</span> : <span class="s1">&#39;javascript&#39;</span>
</span><span class='line'>        \ }}
</span><span class='line'><span class="k">endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> hooks <span class="p">=</span> neobundle#get_hooks<span class="p">(</span><span class="s1">&#39;tern_for_vim&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> hooks.on_post_source<span class="p">(</span>bundle<span class="p">)</span>
</span><span class='line'>  <span class="k">function</span><span class="p">!</span> <span class="k">s</span>:disable_tern<span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> &amp;<span class="k">filetype</span> <span class="p">=~</span> <span class="s1">&#39;^javascript&#39;</span>
</span><span class='line'>      autocmd<span class="p">!</span> TernAutomatically <span class="p">&lt;</span>buffer<span class="p">&gt;</span>
</span><span class='line'>      <span class="k">call</span> tern#Disable<span class="p">()</span>
</span><span class='line'>    <span class="k">endif</span>
</span><span class='line'>  <span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span><span class="p">!</span> <span class="k">s</span>:disable_tern_automatically<span class="p">()</span>
</span><span class='line'>    augroup TernAutomatically
</span><span class='line'>      autocmd<span class="p">!</span> * <span class="p">&lt;</span>buffer<span class="p">&gt;</span>
</span><span class='line'>      autocmd <span class="nb">FileType</span> * <span class="p">&lt;</span>buffer<span class="p">&gt;</span> <span class="k">call</span> <span class="k">s</span>:disable_tern<span class="p">()</span>
</span><span class='line'>    augroup END
</span><span class='line'>  <span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'>  augroup MyAutoCmd
</span><span class='line'>    autocmd <span class="nb">FileType</span> javascript <span class="k">call</span> <span class="k">s</span>:disable_tern_automatically<span class="p">()</span>
</span><span class='line'>  augroup END
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>unlet hooks
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimを使って新人教育]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/training-of-new-employees.html"/>
    <updated>2013-11-11T05:21:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/training-of-new-employees</id>
    <content type="html"><![CDATA[<p>一緒に働く仲間が増えました。
普段からオープンソースの開発や、バリバリ仕事ができる人でなければなかなかコードを書く力というのは一定の基準にならないと思います。</p>

<p>そこで、ペアプロやリファクタリングなどを行ってコーディングを教えるのが普通だと思うのですが、うちの会社はほとんどリモート勤務です。</p>

<p>とりあえず、最低限のレベルになるまでは、Githubを通して一問一答の形で問題を解いてってもらおうかなと思いました。</p>

<p>幸い、新人の人もvimmerなので、そのためのプラグインを作りました。</p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/11_11.png" title="Vimのデモ" ></p>

<p><strong><a href="https://github.com/enfactv/assignment">assignment.vim</a></strong></p>

<p>インストールはごく簡単です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;alpaca-tc/assignment&#39;</span>`
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:assignment#<span class="nb">path</span> <span class="p">=</span> expand<span class="p">(</span><span class="s1">&#39;~/path/to/assignment&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; 初期化</span>
</span><span class='line'><span class="c">&quot; `:AssignmentInit ~/インストール先ディレクトリ`</span>
</span></code></pre></td></tr></table></div></figure>


<h3>良かったこと</h3>

<ul>
<li>GitHubの使い方がわからなくても、Vimから取り組めること</li>
<li>問題を作成するのが少し楽になったこと</li>
<li>Guard + Rspecの環境で、自動テストされること</li>
</ul>


<h3>悪かったこと</h3>

<ul>
<li>一問一答の形式って鬼効率悪いよね&hellip;</li>
</ul>


<p>まぁ、とりあえず一ヶ月はこの形式で進めていけば、最低限のコーディングができるようになるはずです。</p>

<h3>まとめ</h3>

<p>正直、今日は書くことがなかっただけです。うい！
暇だなーと思う方が入れば、プラグインを入れて問題を解いてみてください。</p>

<ol>
<li>プラグインをインストール</li>
<li><code>:AssignmentInit ~/インストール先ディレクトリ</code>を実行</li>
<li>vimrcに<code>let g:assignment#path = expand('~/path/to/assignment')</code>を追加</li>
<li><code>:Assignment solve &lt;tab&gt;</code>で問題を選択</li>
<li>Guardをまわしながら解くのみ！</li>
</ol>


<p>8クイーン問題や、RubyのDSLを作る問題などです。
初級者向けですが、暇つぶしにはなると思いますよ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimを使って新人教育]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/training-of-new-employee.html"/>
    <updated>2013-11-11T05:21:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/training-of-new-employee</id>
    <content type="html"><![CDATA[<p>嬉しいことに、一緒に働く仲間が2人増えました。</p>

<p>まだRubyに慣れていないそうなので、はじめの一ヶ月は教育期間を挟みます。</p>

<p>新人の方もvimmerなので、そのためのプラグインを作りました。</p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/11_11.png" title="Vimのデモ" ></p>

<p><strong><a href="https://github.com/enfactv/assignment">assignment.vim</a></strong></p>

<p>インストールはごく簡単です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;alpaca-tc/assignment&#39;</span>`
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:assignment#<span class="nb">path</span> <span class="p">=</span> expand<span class="p">(</span><span class="s1">&#39;~/path/to/assignment&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>良かったこと</h3>

<ul>
<li>GitHubの使い方がわからなくても、Vimから徐々に取り組めること</li>
<li>問題のやり取りが楽になったこと</li>
<li>自動テストがあるので、リモート勤務でも採点できること</li>
</ul>


<h3>悪かったこと</h3>

<ul>
<li>一問一答の形式って効率悪いよね&hellip;</li>
</ul>


<p>とりあえず一ヶ月はこの形式で進めて、Rubyに慣れてもらおうかと思います。</p>

<h2>まとめ</h2>

<p>正直、今日は書くことがなかっただけです。えへ。
暇だなー、俺初級者かなーと思う方が入れば、試しに問題に挑戦してみてください。</p>

<ol>
<li>プラグインをインストール</li>
<li><code>:AssignmentInit ~/インストール先ディレクトリ</code>を実行して初期化</li>
<li>vimrcに<code>let g:assignment#path = expand('~/path/to/assignment')</code>を追加</li>
<li><code>:Assignment solve &lt;tab&gt;</code>で問題を選択</li>
<li>Guardをまわしながら解くのみ！</li>
</ol>


<p>初めは、8クイーン問題や、RubyのDSLを作る問題などです。
初級者向けですが、少しは暇つぶしにはなると思いますよ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オススメなVimのプラグイン紹介]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/plugins-best-of-vim-1.html"/>
    <updated>2013-11-07T05:22:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/plugins-best-of-vim-1</id>
    <content type="html"><![CDATA[<p>普段使っているプラグインの中で、<em>これはイケてる！</em>と思ったプラグインを4つ紹介。</p>

<h2><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></h2>

<ul>
<li><code>{}</code>、<code>()</code>などの、対応する文字を<em>自働入力</em></li>
<li>括弧の片方が消えた時や、重複する時に<em>自働で調整してくれる</em></li>
<li><code>innoremap ( ()&lt;Left&gt;</code>とか未だにやっているのダサくない？</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; [本家](https://github.com/jiangmiao/auto-pairs)</span>
</span><span class='line'><span class="c">&quot; Lazy loading用に修正済み</span>
</span><span class='line'>NeoBundleLazy <span class="s1">&#39;alpaca-tc/auto-pairs&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>      \ <span class="s1">&#39;insert&#39;</span>: <span class="m">1</span> }}
</span><span class='line'>
</span><span class='line'><span class="k">let</span> hooks <span class="p">=</span> neobundle#get_hooks<span class="p">(</span><span class="s1">&#39;auto-pairs&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> hooks.on_post_source<span class="p">(</span>bundle<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> auto_pairs#try_init<span class="p">()</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>unlet hooks
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/junegunn/vim-easy-align">vim-easy-align</a></h2>

<ul>
<li>使いやすさ抜群の<em>整列用プラグイン</em></li>
<li><code>Alignta</code>がメジャーだけど、正直使いにくいよね。</li>
</ul>


<p><img class="image_on_frame center" src="https://raw.github.com/junegunn/i/master/vim-easy-align.gif" title="vim-easy-align DEMO" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundleLazy <span class="s1">&#39;junegunn/vim-easy-align&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span>: {
</span><span class='line'>      \ <span class="s1">&#39;commands&#39;</span> : [<span class="s1">&#39;EasyAlign&#39;</span>] }}
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/Yggdroot/indentLine">indentLine</a></h2>

<ul>
<li>イケてる、<em>インデント表示プラグイン</em></li>
<li><code>vim-indent-guides</code>は画面がうるさくなるから嫌！っていう人向け</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> has<span class="p">(</span><span class="s1">&#39;conceal&#39;</span><span class="p">)</span>
</span><span class='line'>  NeoBundleLazy <span class="s1">&#39;Yggdroot/indentLine&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>        \   <span class="s1">&#39;commands&#39;</span> : [<span class="s1">&#39;IndentLinesReset&#39;</span><span class="p">,</span> <span class="s1">&#39;IndentLinesToggle&#39;</span>]<span class="p">,</span>
</span><span class='line'>        \   <span class="s1">&#39;filetypes&#39;</span>: <span class="k">g</span>:my.<span class="nb">ft</span>.program_files<span class="p">,</span>
</span><span class='line'>        \ }}
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/terryma/vim-multiple-cursors">vim-multiple-cursors</a></h2>

<ul>
<li>SublimeTextの複数マーク&amp;同時編集 の機能を実現するプラグイン</li>
<li>実装に関しては完全に「こいつ無茶しやがって&hellip;」状態。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundleLazy <span class="s1">&#39;terryma/vim-multiple-cursors&#39;</span><span class="p">,</span> { <span class="s1">&#39;autload&#39;</span>: {
</span><span class='line'>      \ <span class="s1">&#39;function_prefix&#39;</span>: <span class="s1">&#39;multiple_cursors&#39;</span><span class="p">,</span>
</span><span class='line'>      \ }}
</span></code></pre></td></tr></table></div></figure>


<p>今回紹介したプラグインは、かなりシンプルに洗練されています。
使っているだけでも、作者の男前さを感じられる。そんなプラグインだと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim中級者を脱する augroup編]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/break-vim-beginners-augroup.html"/>
    <updated>2013-11-02T02:30:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/break-vim-beginners-augroup</id>
    <content type="html"><![CDATA[<h2>augroup, autocmdを理解する</h2>

<p><strong>所要時間 3分</strong></p>

<h3>この記事を読むべき人</h3>

<ul>
<li><code>augroup</code>を理解していない人</li>
<li><code>:source</code>コマンドを使う人</li>
</ul>


<h2>そもそもautocmdって？</h2>

<p>これは何をしているコマンドなのか分解してみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>autocmd <span class="nb">BufNewFile</span> * echo <span class="s1">&#39;This is new file&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>autocmdのコマンドを開始しますよ</li>
<li><code>BufNewFile</code>というタイミングでこのコマンドを実行しますよ</li>
<li>全てのバッファで<code>echo 'This is new file'</code>を実行しますよ</li>
</ol>


<p>となります。</p>

<p>このように、保存時や新規のファイルといったタイミングでコマンドを実行できます。</p>

<h2>では、augroupはなんのために存在するの？</h2>

<p><code>augroup</code>は、<code>autocmd</code>をグループでまとめるためのコマンドです。こんな感じて使われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>augroup EditNewFile
</span><span class='line'>  autocmd<span class="p">!</span>
</span><span class='line'>  autocmd <span class="nb">BufNewFile</span> * echo <span class="s1">&#39;This is new file&#39;</span>
</span><span class='line'>augroup END
</span></code></pre></td></tr></table></div></figure>


<p>例えば、<code>autocmd</code>が設定されているvimrcを、<code>:source ~/.vimrc</code>で再度読み込むとしましょう。</p>

<p>するとどうなるかというと、通常は<strong><code>autocmd</code>が重複して2度設定されます</strong>
当然、その<code>autocmd</code>が発火するときに2度実行されるので、実行が遅くなります。</p>

<p>それを防ぐために<code>augroup</code>を使います。</p>

<h2>ベストプラクティスは？</h2>

<p>つまるところ、<code>augroup</code>は<code>autocmd</code>をまとめて初期化する場合に使用します。
具体例を上げると、下記のような形になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>augroup MyAutoCmd
</span><span class='line'>  autocmd<span class="p">!</span> <span class="c">&quot; =&gt; このaugroupに紐づいたautocmdを消し去ります</span>
</span><span class='line'>augroup END
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>augroup MyAutoCmd
</span><span class='line'>  autocmd <span class="nb">BufNewFile</span> * echo <span class="s1">&#39;This is new file&#39;</span>
</span><span class='line'>  autocmd <span class="nb">BufNewFile</span><span class="p">,</span><span class="nb">BufRead</span> *.haml <span class="k">setf</span> haml
</span><span class='line'>augroup END
</span></code></pre></td></tr></table></div></figure>


<p>こうすることで、2重に設定されることのない設定になります。</p>

<h2>もう一歩踏み込んでみる</h2>

<p>autocmdの設定方法をVimのRuntimeから学んでみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>edit $VIMRUNTIME/<span class="k">filetype</span>.<span class="k">vim</span>
</span></code></pre></td></tr></table></div></figure>


<p>これはファイルタイプの定義を行っているファイルです。</p>

<p>augroupが宣言されているので、一覧を<code>:autocmd filetypedetect</code>でみれることが分かります。</p>

<p>驚くことに、もの凄い数のコマンドを実行してファイルタイプを設定していることが分かります。</p>

<h3>ftdetectを知る</h3>

<p>filetype.vimにて<code>runtime! ftdetect/*.vim</code>と書かれており、<code>~/.vim/ftdetect/*</code>を読み込んでいることが分かります。</p>

<p>つまり、ファイルタイプの設定は<code>ftdetect</code>以下で設定するのがベターとされています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; ~/.vim/ftdetect/coffee.vim</span>
</span><span class='line'>autocmd <span class="nb">BufNewFile</span><span class="p">,</span><span class="nb">BufRead</span> *.coffee    <span class="k">setf</span> coffee
</span></code></pre></td></tr></table></div></figure>


<p>といった設定にて、ファイルタイプを検出できるようになります。
<code>augroup filetypedetect</code>の宣言内なので、グループの宣言は不要です。</p>

<h2>本日の脱Vim中級者</h2>

<p>vimrcでファイルタイプの検出をしている方は、<code>~/.vim/ftdetect</code>以下に設定を移してみましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopressとセットで入れておきたいVimプラグインまとめ]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/octopress_and_vimplugin.html"/>
    <updated>2013-11-01T17:06:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/octopress_and_vimplugin</id>
    <content type="html"><![CDATA[<p>Octopressは利用者が一部なので、デフォルトのVimではなにも対応していません。
プラグイン無しでも利用することもできますが、正直使いにくいですよね。</p>

<p>最低限下記のプラグインぐらいは入れておきましょう。</p>

<h2><a href="https://github.com/tpope/vim-liquid">vim-liquid</a></h2>

<p><code>liquid</code>はoctopress(jekyll)で採用されているテンプレートエンジンです。</p>

<p>このプラグインを入れると、ファイルタイプの検知や、キーワードのハイライトをしてくれるようになります。
何が良いかというと、そのおかげで<code>neocomplete.vim</code>や<code>matchit.vim</code>などの他のプラグインもliquid用に対応してくれるんですよね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundleLazy <span class="s1">&#39;tpope/vim-liquid&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>      \ <span class="s1">&#39;filetypes&#39;</span> : <span class="s1">&#39;liquid&#39;</span>
</span><span class='line'>      \ }}
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/tangledhelix/vim-octopress">vim-octopress</a></h2>

<p>VimからOctopressのコマンド操作をするプラグインです。
<code>:Octopress [command][{option}]</code>で実行することができます。</p>

<ol>
<li><code>:Octopress new_post title</code></li>
<li><code>:Octopress gen_deploy</code></li>
</ol>


<p>この2回の操作で、新しい記事をアップロードできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundleLazy <span class="s1">&#39;tangledhelix/vim-octopress&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>      \ <span class="s1">&#39;commands&#39;</span>: <span class="s1">&#39;Octopress&#39;</span><span class="p">,</span>
</span><span class='line'>      \ }}
</span></code></pre></td></tr></table></div></figure>


<h2><a href="https://github.com/alpaca-tc/alpaca_octopress.vim">alpaca_octopress</a></h2>

<p><code>vim-octopress</code>の非同期実行版です。
人柱属性のある方はこちらをオススメします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundleLazy <span class="s1">&#39;alpaca-tc/alpaca_octopress.vim&#39;</span><span class="p">,</span> { <span class="s1">&#39;autoload&#39;</span> : {
</span><span class='line'>      \ <span class="s1">&#39;branch&#39;</span>: <span class="s1">&#39;v0.3&#39;</span><span class="p">,</span>
</span><span class='line'>      \ <span class="s1">&#39;functions&#39;</span> : <span class="s1">&#39;octopress#complete&#39;</span><span class="p">,</span>
</span><span class='line'>      \ <span class="s1">&#39;commands&#39;</span>: {
</span><span class='line'>      \   <span class="s1">&#39;name&#39;</span> : <span class="s1">&#39;Octopress&#39;</span><span class="p">,</span>
</span><span class='line'>      \   <span class="s1">&#39;complete&#39;</span> : <span class="s1">&#39;customlist,octopress#complete&#39;</span><span class="p">,</span>
</span><span class='line'>      \ }<span class="p">,</span>
</span><span class='line'>      \ }}
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>Octopressはかなりエンジニアと相性が良いプロジェクトだと思います。
ついでにVimmerの方は、これらのプラグインを入れてより親和性を高めましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[３日で検索1位になりました]]></title>
    <link href="http://alpaca-tc.github.io/blog/seo/no1_alpaca_engineer.html"/>
    <updated>2013-11-01T02:29:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/seo/no1_alpaca_engineer</id>
    <content type="html"><![CDATA[<p>二日前のブログにて
こんなことを言っていたんですが、</p>

<blockquote><h3>2. SEOで遊びたい</h3>

<p>そろそろ、「アルパカ エンジニア」や幾つかのキーワードが欲しいです。</p></blockquote>

<p>ブログを初めて3日目にて、はやくも<strong>検索結果が1位</strong>になりました！</p>

<p><img class="image_on_frame center" src="http://alpaca-tc.github.io/images/blog/seo_no_1.png" title="アルパカエンジニア SEO 1位" ></p>

<p>超ニッチなワードだと、タイトルの一致率高めてやれば一瞬なんですね〜。
僕の他にもアルパカを名乗るエンジニアブログが居たのですが、順位を抜いたのでやっと胸を張れます。(何に)</p>

<p>早くも、ブログを始めた目的の一つが終わりましたw</p>

<p>やりたいことのために、他にも幾つかのキーワードで上位に出るようにしたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[alpaca_octopress続き]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/alpaca_octopress/about_alpaca_complete.html"/>
    <updated>2013-10-30T04:34:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/alpaca_octopress/about_alpaca_complete</id>
    <content type="html"><![CDATA[<p>octopress用のプラグイン<em>alpaca_octopress.vim</em>をガシガシ作っています。
コマンドの非同期実行、サイトのプレビュー、etc&hellip;全てをVimで完結しつつあります！</p>

<p>ある程度完成したら、Vim使いがOctopressを5分で構築出来るようなプラグインも同封するつもり。
全てVimで完結するのはVimmerにとっては楽でいいなぁ〜。</p>

<h2>OctopressTweet!!</h2>

<p>そして今から<code>:OctopressTweet</code>を実行して、この投稿がTweetされることを望みます。
無事Tweet出来たらまさに完結ですね。うりゃ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[alpaca_octopressを作っている]]></title>
    <link href="http://alpaca-tc.github.io/blog/vim/alpaca_octopress/create_new_plugin_for_octopress.html"/>
    <updated>2013-10-29T04:52:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/vim/alpaca_octopress/create_new_plugin_for_octopress</id>
    <content type="html"><![CDATA[<p>昨日言った通り、今は<a href="https://github.com/alpaca-tc/alpaca_octopress.vim">alpaca_octopress.vim</a>を作っています</p>

<p>ブランチは<code>v0.3</code>が最新ですね。</p>

<h2>使い方</h2>

<p><code>:Octopress [command] {option}</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; 設定はこんな感じ</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:octopress#rake_command <span class="p">=</span> <span class="s1">&#39;bundle exec rake&#39;</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:octopress#project_url <span class="p">=</span> expand<span class="p">(</span><span class="s1">&#39;~/project/octopress&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:octopress#system#async <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Octopress関連で<code>deploy</code>とか<code>async</code>とかをよく使うけど、このプラグインを入れれば非同期で実行できます。
新しく記事書くときは、<code>:Octopress new_post 新しい記事</code>とやればどのディレクトリに居ても起動出来るので、記事を書くのがちょっと楽になります。</p>

<h2>初めてのvital.vim</h2>

<p>このプラグインを作る上で、初めて<a href="https://github.com/vim-jp/vital.vim">vital.vim</a>さんを使ってみました。
vitalは、JavaScriptでいうjQueryみたいに、これはベストな書き方！というコードを寄せ集めたスクリプト集です。</p>

<p>今回は、プロセスをオブジェクト化して、非同期で実行&amp;管理するために使ってみました。
触ってみた感じ、まだまだ人柱感が強いです。。</p>

<p>荒削りというか、汎用的というか、、Process周りのvitalはまだまだ利用者がいないのだろうと思います。
vimproc周りの動作もおかしいようだし、Vimからプロセス操作するのはやっぱり難しいね！</p>

<hr />

<p><code>:Octopress deploy</code>っと！</p>

<p>さて、寝よう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初めました]]></title>
    <link href="http://alpaca-tc.github.io/blog/diary/start_blog.html"/>
    <updated>2013-10-27T23:12:00+09:00</updated>
    <id>http://alpaca-tc.github.io/blog/diary/start_blog</id>
    <content type="html"><![CDATA[<p>記念すべき初カキコ。
さて、技術ブログは今までQiitaを使っていましたが、そちらを辞めて自分のブログを作ることにしました。</p>

<h2>乗り換える2つの理由</h2>

<h3>1. Qiitaは使いにくい</h3>

<p>皆さんも薄々感じていると思いますが、QiitaのUIは使いにくいです。だってVimから出るんだもん。</p>

<h3>2. SEOで遊びたい</h3>

<p>そろそろ、「アルパカ エンジニア」や幾つかのキーワードが欲しいです。</p>

<h3>3. 対外アピールできない</h3>

<p>Qiitaで見ても、「この人どんな人？」って分からないですよね。それは楽しくないし、勿体ない。</p>

<p>なので、<strong>Vimで完結</strong> + <strong>アルパカなエンジニア</strong>をアピールするためにブログにしたいと思います。</p>

<h2>Octopress + Vim</h2>

<p>Vimから記事を書いて、Vimからデプロイしてます。
Octopressを簡単に操作できるように<a href="https://github.com/alpaca-tc/alpaca_octopress.vim">プラグイン</a>を作りました。
あぁ、簡単でいいですね。</p>

<p><code>:Octopress new_post 新しい記事の名前</code></p>

<h2>アルパカなエンジニアを目指す</h2>

<p>しばらくの目標です。
半年ぐらいで、「アルパカ + エンジニア」のキーワードで1位取れればなぁと思います。
そして、HPのデザインもアルパカな感じにしていきます！</p>
]]></content>
  </entry>
  
</feed>
